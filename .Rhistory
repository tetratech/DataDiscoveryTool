names(df.data) %in% names(data())
names(df.data)[names(df.data) %in% names(data())]
names(df.data)[names(df.data) !%in% names(data())]
dim(df.data)
names(data())
length(names(data()))
names(df.data)[!(names(df.data) %in% names(data()))]
NameOrder <- c(names(data()), names(df.data)[!(names(df.data) %in% names(data()))])
length(NameOrder)
dim(data())
dim(df.data)
df.data <- df.data[,NameOrder]
dim(df.data)
runApp()
runApp()
runApp()
??join
runApp()
# check RDS
myDir <- file.path("C:","Users","Erik.Leppo","Downloads")
myFiles <- list.files(path=myDir, pattern="DDT_Data_*")
myFiles
y <- readRDS(file.path(myDir,myFiles[length(myFiles)]))
x <- readRDS(file.path(myDir,myFiles[7]))
y
x
str(y)
str(x)
x$tbl_def
View(x)
View(y)
runApp()
runApp()
df.QAQC[,"Apply.QAQC"]
runApp()
runApp()
names(data()) %in% names(df.data)
names(df.data) %in% names(data())
dim(df.data)
names(data())
names(df.data)
?left_join
runApp()
runApp()
runApp()
dim(df.data)
df.data <- all_data()
df.QAQC <- RV_QAQC$df_data #data_QAQC
#
df.data$mergeKey <- with(df.data, paste(ActivityMediaName, CharacteristicName,
ResultSampleFractionText, USGSPCode,
ResultMeasure.MeasureUnitCode,sep="|"))
# # rename some variables to *.orig
# data.table::setnames(df.data, old = c("Characteristic", "Unit", "ResultSampleFractionText"),
#                      new = c
df.QAQC$mergeKey <- with(df.QAQC, paste(Activity.Media, Characteristic,
Sample.Fraction, PCODE,
Units,sep="|"))
# identify list of variables to merge into with sample data
df.QAQCvars <- c("Apply.QAQC", "Characteristic", "Units", "Units.Conv.Mult",
"Sample.Fraction.QAQC", "QC.Min", "QC.Max", "mergeKey")
x<-NULL
x <- dplyr::left_join(df.data, df.QAQC[df.QAQC$apply, df.QAQCvars], by=mergeKey)
names(df.data)
df.data <- all_data()
df.QAQC <- RV_QAQC$df_data #data_QAQC
#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# *** TESTING ***
# strFile <- file.path("C:","Users","Erik.Leppo","Downloads","DDT_QAQC_Default.xlsx")
# df.QAQC <- XLConnect::readWorksheetFromFile(strFile, sheet="Methods Table", startRow=6, header=TRUE) #, drop=c(1,2))
# strFile <- file.path("C:","Users","Erik.Leppo","Downloads","DDT_Data_20170804_081355_multipleParam.rds")
# df.data <- readRDS(strFile)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# 1. Prep Sample Data
{
# create merge key
df.data$mergeKey <- with(df.data, paste(ActivityMediaName, CharacteristicName,
ResultSampleFractionText, USGSPCode,
ResultMeasure.MeasureUnitCode,sep="|"))
# # rename some variables to *.orig
# data.table::setnames(df.data, old = c("Characteristic", "Unit", "ResultSampleFractionText"),
#                      new = c("Characteristic.orig", "Unit.orig", "ResultSampleFractionText.orig"))
}
#
# 2. Prep QAQC Data
{
# create merge key
df.QAQC$mergeKey <- with(df.QAQC, paste(Activity.Media, Characteristic,
Sample.Fraction, PCODE,
Units,sep="|"))
# identify list of variables to merge into with sample data
df.QAQCvars <- c("Apply.QAQC", "Characteristic", "Units", "Units.Conv.Mult",
"Sample.Fraction.QAQC", "QC.Min", "QC.Max", "mergeKey")
}
#
dim(df.data)
df.data <- all_data()
df.QAQC <- RV_QAQC$df_data #data_QAQC
df.data$mergeKey <- with(df.data, paste(ActivityMediaName, CharacteristicName,
ResultSampleFractionText, USGSPCode,
ResultMeasure.MeasureUnitCode,sep="|"))
# # rename some variables to *.orig
runApp()
df.data <- all_data()
df.QAQC <- RV_QAQC$df_data #data_QAQC
df.data$mergeKey <- with(df.data, paste(ActivityMediaName, CharacteristicName,
ResultSampleFractionText, USGSPCode,
ResultMeasure.MeasureUnitCode,sep="|"))
# # rename some variables
df.QAQC$mergeKey <- with(df.QAQC, paste(Activity.Media, Characteristic,
Sample.Fraction, PCODE,
Units,sep="|"))
# identify list of variables to merge into with sample data
df.QAQCvars <- c("Apply.QAQC", "Characteristic", "Units", "Units.Conv.Mult",
"Sample.Fraction.QAQC", "QC.Min", "QC.Max", "mergeKey")
x <- dplyr::left_join(df.data, df.QAQC[df.QAQC$apply, df.QAQCvars], by="mergeKey")
dim(x)
names(x)
names(x) %in% names(data())
dim(x)
dim(df.data)
dim(df.QAQC[df.QAQC$apply, df.QAQCvars])
runApp()
dim(data())
dim(df.data)
runApp()
shiny::runApp()
df.QAQC <- RV_QAQC$df_data
df.data$mergeKey <- with(df.data, paste(ActivityMediaName, CharacteristicName,
ResultSampleFractionText, USGSPCode,
ResultMeasure.MeasureUnitCode,sep="|"))
x <- c(ActivityMediaName, CharacteristicName,
ResultSampleFractionText, USGSPCode,
ResultMeasure.MeasureUnitCode)
x <- c("ActivityMediaName", "CharacteristicName",
"ResultSampleFractionText", "USGSPCode",
"ResultMeasure.MeasureUnitCode")
x %in% names(df.data)
df.data$mergeKey <- with(df.data, paste(ActivityMediaName, CharacteristicName,
ResultSampleFractionText, USGSPCode,
ResultMeasure.MeasureUnitCode,sep="|"))
df.QAQC$mergeKey <- with(df.QAQC, paste(Activity.Media, Characteristic,
Sample.Fraction, PCODE,
Units,sep="|"))
# identify list of variables to merge into with sample data
df.QAQCvars <- c("Apply.QAQC", "Characteristic", "Units", "Units.Conv.Mult",
"Sample.Fraction.QAQC", "QC.Min", "QC.Max", "mergeKey")
QAQC_Apply_datapath <- file.path(getwd(),file)
names(df.data) %in% names(data())
names(df.data)
runApp()
runApp()
shiny::runApp()
runApp()
df.data <- df.data[,!(names(df.data) %in% c("mergeKey"))]
"qcRange" %in% names(df.data)
names(df.data)
df.data$qcRange <- FALSE
df.data[!is.na(df.data$Result) & !is.na(df.data$QC.Min) & df.data$Result < df.data$QC.Min, "qcRange"]<-TRUE
df.data[!is.na(df.data$Result) & !is.na(df.data$QC.Max) & df.data$Result > df.data$QC.Max, "qcRange"]<-TRUE
View(df.data)
"Result" %in% names(df.data)
a <- "QC.Min"
a %in% names(df.data)
a <- "QC.Max"
a %in% names(df.data)
a <- c("Units.Conv.Mult", "ResultLower", "ResultUpper")
a %in% names(df.data)
a<-c("Apply.QAQC", "Characteristic", "Unit", "SampleFraction")
a %in% names(df.data)
df.data <- data() #not all_data()
df.QAQC <- RV_QAQC$df_data #data_QAQC
#
df.data$mergeKey <- with(df.data, paste(ActivityMediaName, CharacteristicName,
ResultSampleFractionText, USGSPCode,
ResultMeasure.MeasureUnitCode,sep="|"))
# # rename some variables to *.orig
data.table::setnames(df.data, old = c("CharacteristicName", "Units", "ResultSampleFractionText"),
new = c("CharacteristicName.orig", "Units.orig", "ResultSampleFractionText.orig"))
#
df.data <- data() #not all_data()
df.QAQC <- RV_QAQC$df_data #data_QAQC
runApp()
df.data <- data() #not all_data()
df.QAQC <- RV_QAQC$df_data #data_QAQC
df.data <- data() #not all_data()
df.QAQC <- RV_QAQC$df_data #data_QAQC
flds.old %in% names(df.data)
runApp()
flds.old
flds.old %in% names(df.data)
names(df.data)
flds.old <- c("CharacteristicName", "ResultMeasure.MeasureUnitCode", "ResultSampleFractionText")
flds.old %in% names(df.data)
flds.new <- paste0(flds.old,".orig")
df.data[,flds.new] <- df.data[,flds.old]
View(df.data)
df.QAQC$mergeKey <- with(df.QAQC, paste(Activity.Media, Characteristic,
Sample.Fraction, PCODE,
Units,sep="|"))
# identify list of variables to merge into with sample data
df.QAQCvars <- c("Apply.QAQC", "Characteristic", "Units", "Units.Conv.Mult",
"Sample.Fraction.QAQC", "QC.Min", "QC.Max", "mergeKey")
df.QAQCvars %in% names(df.QAQC)
df.data <- merge (df.data, df.QAQC[df.QAQC[,"Apply.QAQC"], df.QAQCvars], by="mergeKey", all.x=TRUE)
dim(df.data)
df.data <- df.data[,!(names(df.data) %in% c("mergeKey"))]
df.data$qcRange <- FALSE
!is.na(df.data$ResultMeasureValue)
!is.na(df.data$QC.Min)
df.data$ResultMeasureValue
df.data$ResultMeasureValue < df.data$QC.Min
df.data[!is.na(df.data$ResultMeasureValue) & !is.na(df.data$QC.Min) & df.data$ResultMeasureValue < df.data$QC.Min, "qcRange"]<-TRUE
df.data[!is.na(df.data$ResultMeasureValue) & !is.na(df.data$QC.Max) & df.data$ResultMeasureValue > df.data$QC.Max, "qcRange"]<-TRUE
runApp()
dim(df.data)
names(df.data)
names(data())
dim(data())
dim(df.data)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?write.table
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
df.data <- filtered_data() #not all_data() or data()
df.QAQC <- RV_QAQC$df_data #data_QAQC
names(df.data)
"ActivityMediaName" %in% names(df.data)
"CharacteristicName" %in% names(df.data)
a<- c("ResultSampleFractionText","USGSPCode","ResultMeasure.MeasureUnitCode")
a %in% df.data
a %in% names(df.data)
df.data$mergeKey <- with(df.data, paste(ActivityMediaName, CharacteristicName,
ResultSampleFractionText, USGSPCode,
ResultMeasure.MeasureUnitCode,sep="|"))
flds.old <- c("CharacteristicName", "ResultMeasure.MeasureUnitCode", "ResultSampleFractionText")
flds.new <- paste0(flds.old,".orig")
df.data[,flds.new] <- df.data[,flds.old]
df.QAQC$mergeKey <- with(df.QAQC, paste(Activity.Media, Characteristic,
Sample.Fraction, PCODE,
Units,sep="|"))
df.QAQCvars <- c("Apply.QAQC", "Characteristic", "Units", "Units.Conv.Mult",
"Sample.Fraction.QAQC", "QC.Min", "QC.Max", "mergeKey")
#}
#
# 3. Merge Data
# apply range check, unit conversion, and fill in.
#{
# do merge where df.QAQC$ApplyQAQC == TRUE and only merge in variables listed in df.QAQCvars
df.merge <- merge (df.data, df.QAQC[df.QAQC[,"Apply.QAQC"], df.QAQCvars], by="mergeKey", all.x=TRUE)
# drop merge key
df.merge <- df.merge[,!(names(df.merge) %in% c("mergeKey"))]
# identify cases where data are outside qc range (do this before unit conversion because
# the ranges in the df.QAQC are based on the original units)
df.merge$qcRange <- FALSE
df.merge[!is.na(df.merge$ResultMeasureValue) & !is.na(df.merge$QC.Min) & df.merge$ResultMeasureValue < df.merge$QC.Min, "qcRange"]<-TRUE
df.merge[!is.na(df.merge$ResultMeasureValue) & !is.na(df.merge$QC.Max) & df.merge$ResultMeasureValue > df.merge$QC.Max, "qcRange"]<-TRUE
# apply unit conversions (because unitsConvMult can be character to accomodate for Deg F->Deg C
# i create a numeric conversion field but suppress warnings to not alarm user
df.merge$Units.Conv.Mult <- suppressWarnings(as.numeric(df.merge$Units.Conv.Mult))
df.merge$ResultMeasureValue      <- ifelse(!is.na(df.merge$ResultMeasureValue     ) & !is.na(df.merge$Units.Conv.Mult),
df.merge$ResultMeasureValue      * df.merge$Units.Conv.Mult, df.merge$ResultMeasureValue     )
df.merge$ResultLower <- ifelse(!is.na(df.merge$ResultLower) & !is.na(df.merge$Units.Conv.Mult),
df.merge$ResultLower * df.merge$Units.Conv.Mult, df.merge$ResultLower)
df.merge$ResultUpper <- ifelse(!is.na(df.merge$ResultUpper) & !is.na(df.merge$Units.Conv.Mult),
df.merge$ResultUpper * df.merge$Units.Conv.Mult, df.merge$ResultUpper)
# apply special case unit conversion (Deg F to Deg C)
df.merge$ResultMeasureValue      <- ifelse(!is.na(df.merge$ResultMeasureValue     ) & !is.na(df.merge$Units.Conv.Mult) & df.merge$Units.Conv.Mult == "F_to_C" ,
(df.merge$ResultMeasureValue      - 32) * (5/9) , df.merge$ResultMeasureValue     )
df.merge$ResultLower <- ifelse(!is.na(df.merge$ResultLower) & !is.na(df.merge$Units.Conv.Mult) & df.merge$Units.Conv.Mult == "F_to_C" ,
(df.merge$ResultLower - 32) * (5/9) , df.merge$ResultLower     )
df.merge$ResultUpper <- ifelse(!is.na(df.merge$ResultUpper) & !is.na(df.merge$Units.Conv.Mult) & df.merge$Units.Conv.Mult == "F_to_C" ,
(df.merge$ResultUpper - 32) * (5/9) , df.merge$ResultUpper     )
# handle those cases where df.QAQC was not merged in (i.e., either df.QAQC$apply==FALSE or
# there was no record to process
df.merge[is.na(df.merge$Apply.QAQC), "apply" ] <- FALSE
df.merge$CharacteristicName <- ifelse(df.merge$Apply.QAQC, df.merge$CharacteristicName, df.merge$CharacteristicName.orig)
df.merge$Units           <- ifelse(df.merge$Apply.QAQC, df.merge$Units          , df.merge$Unit.orig          )
df.merge$ResultSampleFractionText <- ifelse(df.merge$Apply.QAQC, df.merge$ResultSampleFractionText, df.merge$ResultSampleFractionText.orig)
# drop non essential variables (Tt-JBH: dont implement till after testing)
#Tt-JBH df.merge <- df.merge[,!(names(df.merge) %in% c("Characteristic.orig", "Unit.orig", "ResultSampleFractionText.orig" ))]
#Tt-JBH df.merge <- df.merge[,!(names(df.merge) %in% c("unitsConvMult", "qcMin", "qcMax", "unitsConvMult.num" ))]
#
NameOrder <- c(names(df.data), names(df.merge)[!(names(df.merge) %in% names(df.data))])
df.merge <- df.merge[,NameOrder]
runApp()
df.data <- filtered_data() #not all_data() or data()
df.QAQC <- RV_QAQC$df_data #data_QAQC
#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# *** TESTING ***
# strFile <- file.path("C:","Users","Erik.Leppo","Downloads","DDT_QAQC_Default.xlsx")
# df.QAQC <- XLConnect::readWorksheetFromFile(strFile, sheet="Methods Table", startRow=6, header=TRUE) #, drop=c(1,2))
# strFile <- file.path("C:","Users","Erik.Leppo","Downloads","DDT_Data_20170804_081355_multipleParam.rds")
# df.data <- readRDS(strFile)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# 1. Prep Sample Data
#{
# create merge key
df.data$mergeKey <- with(df.data, paste(ActivityMediaName, CharacteristicName,
ResultSampleFractionText, USGSPCode,
ResultMeasure.MeasureUnitCode,sep="|"))
# # rename some variables to *.orig
# data.table::setnames(df.merge, old = c("CharacteristicName", "Units", "ResultSampleFractionText"),
#                      new = c("CharacteristicName.orig", "Units.orig", "ResultSampleFractionText.orig"))
flds.old <- c("CharacteristicName", "ResultMeasure.MeasureUnitCode", "ResultSampleFractionText")
flds.new <- paste0(flds.old,".orig")
df.data[,flds.new] <- df.data[,flds.old]
#}
#
# 2. Prep QAQC Data
#{
# create merge key
df.QAQC$mergeKey <- with(df.QAQC, paste(Activity.Media, Characteristic,
Sample.Fraction, PCODE,
Units,sep="|"))
# identify list of variables to merge into with sample data
df.QAQCvars <- c("Apply.QAQC", "Characteristic", "Units", "Units.Conv.Mult",
"Sample.Fraction.QAQC", "QC.Min", "QC.Max", "mergeKey")
#}
#
# 3. Merge Data
# apply range check, unit conversion, and fill in.
#{
# do merge where df.QAQC$ApplyQAQC == TRUE and only merge in variables listed in df.QAQCvars
df.merge <- merge (df.data, df.QAQC[df.QAQC[,"Apply.QAQC"], df.QAQCvars], by="mergeKey", all.x=TRUE)
#~~~
# Test Join instead of Merge
# x<-NULL
# x <- dplyr::left_join(df.merge, df.QAQC[df.QAQC$apply, df.QAQCvars], by="mergeKey")
# dim(x)
#~~~~
# drop merge key
df.merge <- df.merge[,!(names(df.merge) %in% c("mergeKey"))]
# identify cases where data are outside qc range (do this before unit conversion because
# the ranges in the df.QAQC are based on the original units)
df.merge$qcRange <- FALSE
df.merge[!is.na(df.merge$ResultMeasureValue) & !is.na(df.merge$QC.Min) & df.merge$ResultMeasureValue < df.merge$QC.Min, "qcRange"]<-TRUE
df.merge[!is.na(df.merge$ResultMeasureValue) & !is.na(df.merge$QC.Max) & df.merge$ResultMeasureValue > df.merge$QC.Max, "qcRange"]<-TRUE
# apply unit conversions (because unitsConvMult can be character to accomodate for Deg F->Deg C
# i create a numeric conversion field but suppress warnings to not alarm user
df.merge$Units.Conv.Mult <- suppressWarnings(as.numeric(df.merge$Units.Conv.Mult))
df.merge$ResultMeasureValue      <- ifelse(!is.na(df.merge$ResultMeasureValue     ) & !is.na(df.merge$Units.Conv.Mult),
df.merge$ResultMeasureValue      * df.merge$Units.Conv.Mult, df.merge$ResultMeasureValue     )
df.merge$ResultLower <- ifelse(!is.na(df.merge$ResultLower) & !is.na(df.merge$Units.Conv.Mult),
df.merge$ResultLower * df.merge$Units.Conv.Mult, df.merge$ResultLower)
df.merge$ResultUpper <- ifelse(!is.na(df.merge$ResultUpper) & !is.na(df.merge$Units.Conv.Mult),
df.merge$ResultUpper * df.merge$Units.Conv.Mult, df.merge$ResultUpper)
# apply special case unit conversion (Deg F to Deg C)
df.merge$ResultMeasureValue      <- ifelse(!is.na(df.merge$ResultMeasureValue     ) & !is.na(df.merge$Units.Conv.Mult) & df.merge$Units.Conv.Mult == "F_to_C" ,
(df.merge$ResultMeasureValue      - 32) * (5/9) , df.merge$ResultMeasureValue     )
df.merge$ResultLower <- ifelse(!is.na(df.merge$ResultLower) & !is.na(df.merge$Units.Conv.Mult) & df.merge$Units.Conv.Mult == "F_to_C" ,
(df.merge$ResultLower - 32) * (5/9) , df.merge$ResultLower     )
df.merge$ResultUpper <- ifelse(!is.na(df.merge$ResultUpper) & !is.na(df.merge$Units.Conv.Mult) & df.merge$Units.Conv.Mult == "F_to_C" ,
(df.merge$ResultUpper - 32) * (5/9) , df.merge$ResultUpper     )
# handle those cases where df.QAQC was not merged in (i.e., either df.QAQC$apply==FALSE or
# there was no record to process
df.merge[is.na(df.merge$Apply.QAQC), "apply" ] <- FALSE
df.merge$CharacteristicName <- ifelse(df.merge$Apply.QAQC, df.merge$CharacteristicName, df.merge$CharacteristicName.orig)
df.merge$Units           <- ifelse(df.merge$Apply.QAQC, df.merge$Units          , df.merge$Unit.orig          )
df.merge$ResultSampleFractionText <- ifelse(df.merge$Apply.QAQC, df.merge$ResultSampleFractionText, df.merge$ResultSampleFractionText.orig)
# drop non essential variables (Tt-JBH: dont implement till after testing)
#Tt-JBH df.merge <- df.merge[,!(names(df.merge) %in% c("Characteristic.orig", "Unit.orig", "ResultSampleFractionText.orig" ))]
#Tt-JBH df.merge
names(df.data)
names(df.merge)
names(df.merge) %in% names(df.data)
!(names(df.merge) %in% names(df.data))
names(df.merge)[!(names(df.merge) %in% names(df.data))])
runApp()
df.data <- filtered_data() #not all_data() or data()
df.QAQC <- RV_QAQC$df_data #data_QAQC
#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# *** TESTING ***
# strFile <- file.path("C:","Users","Erik.Leppo","Downloads","DDT_QAQC_Default.xlsx")
# df.QAQC <- XLConnect::readWorksheetFromFile(strFile, sheet="Methods Table", startRow=6, header=TRUE) #, drop=c(1,2))
# strFile <- file.path("C:","Users","Erik.Leppo","Downloads","DDT_Data_20170804_081355_multipleParam.rds")
# df.data <- readRDS(strFile)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# 1. Prep Sample Data
#{
# create merge key
df.data$mergeKey <- with(df.data, paste(ActivityMediaName, CharacteristicName,
ResultSampleFractionText, USGSPCode,
ResultMeasure.MeasureUnitCode,sep="|"))
# # rename some variables to *.orig
# data.table::setnames(df.merge, old = c("CharacteristicName", "Units", "ResultSampleFractionText"),
#                      new = c("CharacteristicName.orig", "Units.orig", "ResultSampleFractionText.orig"))
flds.old <- c("CharacteristicName", "ResultMeasure.MeasureUnitCode", "ResultSampleFractionText")
flds.new <- paste0(flds.old,".orig")
df.data[,flds.new] <- df.data[,flds.old]
#}
#
# 2. Prep QAQC Data
#{
# create merge key
df.QAQC$mergeKey <- with(df.QAQC, paste(Activity.Media, Characteristic,
Sample.Fraction, PCODE,
Units,sep="|"))
# identify list of variables to merge into with sample data
df.QAQCvars <- c("Apply.QAQC", "Characteristic", "Units", "Units.Conv.Mult",
"Sample.Fraction.QAQC", "QC.Min", "QC.Max", "mergeKey")
#}
#
# 3. Merge Data
# apply range check, unit conversion, and fill in.
#{
# do merge where df.QAQC$ApplyQAQC == TRUE and only merge in variables listed in df.QAQCvars
df.merge <- merge (df.data, df.QAQC[df.QAQC[,"Apply.QAQC"], df.QAQCvars], by="mergeKey", all.x=TRUE)
#~~~
# Test Join instead of Merge
# x<-NULL
# x <- dplyr::left_join(df.merge, df.QAQC[df.QAQC$apply, df.QAQCvars], by="mergeKey")
# dim(x)
#~~~~
# drop merge key
df.merge <- df.merge[,!(names(df.merge) %in% c("mergeKey"))]
# identify cases where data are outside qc range (do this before unit conversion because
# the ranges in the df.QAQC are based on the original units)
df.merge$qcRange <- FALSE
df.merge[!is.na(df.merge$ResultMeasureValue) & !is.na(df.merge$QC.Min) & df.merge$ResultMeasureValue < df.merge$QC.Min, "qcRange"]<-TRUE
df.merge[!is.na(df.merge$ResultMeasureValue) & !is.na(df.merge$QC.Max) & df.merge$ResultMeasureValue > df.merge$QC.Max, "qcRange"]<-TRUE
# apply unit conversions (because unitsConvMult can be character to accomodate for Deg F->Deg C
# i create a numeric conversion field but suppress warnings to not alarm user
df.merge$Units.Conv.Mult <- suppressWarnings(as.numeric(df.merge$Units.Conv.Mult))
df.merge$ResultMeasureValue      <- ifelse(!is.na(df.merge$ResultMeasureValue     ) & !is.na(df.merge$Units.Conv.Mult),
df.merge$ResultMeasureValue      * df.merge$Units.Conv.Mult, df.merge$ResultMeasureValue     )
df.merge$ResultLower <- ifelse(!is.na(df.merge$ResultLower) & !is.na(df.merge$Units.Conv.Mult),
df.merge$ResultLower * df.merge$Units.Conv.Mult, df.merge$ResultLower)
df.merge$ResultUpper <- ifelse(!is.na(df.merge$ResultUpper) & !is.na(df.merge$Units.Conv.Mult),
df.merge$ResultUpper * df.merge$Units.Conv.Mult, df.merge$ResultUpper)
# apply special case unit conversion (Deg F to Deg C)
df.merge$ResultMeasureValue      <- ifelse(!is.na(df.merge$ResultMeasureValue     ) & !is.na(df.merge$Units.Conv.Mult) & df.merge$Units.Conv.Mult == "F_to_C" ,
(df.merge$ResultMeasureValue      - 32) * (5/9) , df.merge$ResultMeasureValue     )
df.merge$ResultLower <- ifelse(!is.na(df.merge$ResultLower) & !is.na(df.merge$Units.Conv.Mult) & df.merge$Units.Conv.Mult == "F_to_C" ,
(df.merge$ResultLower - 32) * (5/9) , df.merge$ResultLower     )
df.merge$ResultUpper <- ifelse(!is.na(df.merge$ResultUpper) & !is.na(df.merge$Units.Conv.Mult) & df.merge$Units.Conv.Mult == "F_to_C" ,
(df.merge$ResultUpper - 32) * (5/9) , df.merge$ResultUpper     )
# handle those cases where df.QAQC was not merged in (i.e., either df.QAQC$apply==FALSE or
# there was no record to process
df.merge[is.na(df.merge$Apply.QAQC), "apply" ] <- FALSE
df.merge$CharacteristicName <- ifelse(df.merge$Apply.QAQC, df.merge$CharacteristicName, df.merge$CharacteristicName.orig)
df.merge$Units           <- ifelse(df.merge$Apply.QAQC, df.merge$Units          , df.merge$Unit.orig          )
df.merge$ResultSampleFractionText <- ifelse(df.merge$Apply.QAQC, df.merge$ResultSampleFractionText, df.merge$ResultSampleFractionText.orig)
# drop non essential variables (Tt-JBH: dont implement till after testing)
#Tt-JBH df.merge <- df.merge[,!(names(df.merge) %in% c("Characteristic.orig", "Unit.orig", "ResultSampleFractionText.orig" ))]
#Tt-JBH df.merge <- df.merge[,!(names(df.merge) %in% c("unitsConvMult", "qcMin", "qcMax", "unitsConvMult.num" ))]
#
# Reorder col
names(df.merge)[!(names(df.merge) %in% names(df.data))]
c(names(df.data), names(df.merge)[!(names(df.merge) %in% names(df.data))])
NameOrder <- c(names(df.data), names(df.merge)[!(names(df.merge) %in% names(df.data))])
NameOrder %in% names(df.merge)
names(df.merge)[!NameOrder %in% names(df.merge)]
names(df.data)
ameOrder2 <- names(df.merge)[!NameOrder %in% names(df.merge)]
NameOrder2 <- names(df.merge)[!NameOrder %in% names(df.merge)]
NameOrder2 %in% names(df.merge)
NameOrder2
NameOrder2 <- names(df.merge)[NameOrder %in% names(df.merge)]
df.merge <- df.merge[,NameOrder2]
runApp()
runApp()
NameOrder <- c(names(df.data), names(df.merge)[!(names(df.merge) %in% names(df.data))])
names(df.merge)[NameOrder %in% names(df.merge)]
NameOrder %in% names(df.merge)
names(df.merge)[!(names(df.merge) %in% names(df.data))]
names(df.data) %in% names(df.merge)
runApp()
runApp()
runApp()
runApp()
runApp()
dim(df.data)
runApp()
flds.old
flds.old %in% names(df.data)
flds.new <- paste0(flds.old,".orig")
flds.new
str(df.data)
flds.old
flds.new
flds.new %in% names(df.data)
flds.old %in% names(df.data)
runApp()
i<-1
flds.new[i]
flds.old[i]
names(df.data)
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
