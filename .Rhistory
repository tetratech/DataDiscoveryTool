library(XLConnect)
source("external/dataQAQC.R", local=TRUE)
dt_QAQC
library(shiny)
library(DT)
library(XLConnect)
source("external/dataQAQC.R", local=TRUE)
shinyApp(
ui = fluidPage(
DT::dataTableOutput('dt_QAQC')
),
server = function(input, output, session) {
ApplyQAQC.column <- 8
data_QAQC_caption <- "Double-click to edit a cell in column Apply.QAQC (highlighted in green [TRUE] or red
[FALSE]).  Edits are only allowed in this column and only for the values TRUE and FALSE."
output$dt_QAQC = DT::renderDataTable(DT::datatable(data_QAQC
, caption=data_QAQC_caption
, rownames=FALSE
, selection='none'
# , server=TRUE
) %>% formatStyle(columns=ApplyQAQC.column
,target="cell"
,background=styleEqual(c(0,1)
,c('lightgreen','red'))
,fontWeight='bold')
)
#outputOptions(output, 'dt_QAQC', suspendWhenHidden=TRUE)
proxy_dt_QAQC <- DT::dataTableProxy('dt_QAQC')
observeEvent(input$x1_cell_edit, {
info=input$x1_cell_edit
str(info)
i = info$row
j = info$col + 1
v = info$value
# Change Value "v" only IF column = 8 AND logical (T/F)
if(j==8 & (toupper(v)=="FALSE" | toupper(v)=="TRUE")) {
dt_QAQC[i,j] <<- DT:::coerceValue(toupper(v), data_QAQC[i,j])
replaceData(proxy_dt_QAQC, data_QAQC, resetPaging=FALSE, rownames=FALSE)
}
#need to update actual table (might be done with above statement)
})
}
)
library(shiny)
library(DT)
library(XLConnect)
source("external/dataQAQC.R", local=TRUE)
shinyApp(
ui = fluidPage(
DT::dataTableOutput('dt_QAQC')
),
server = function(input, output, session) {
ApplyQAQC.column <- 8
data_QAQC_caption <- "Double-click to edit a cell in column Apply.QAQC (highlighted in green [TRUE] or red
[FALSE]).  Edits are only allowed in this column and only for the values TRUE and FALSE."
output$dt_QAQC = DT::renderDataTable(DT::datatable(data_QAQC
, caption=data_QAQC_caption
, rownames=FALSE
, selection='none'
# , server=TRUE
) %>% formatStyle(columns=ApplyQAQC.column
,target="cell"
,background=styleEqual(c(1,0)
,c('lightgreen','red'))
,fontWeight='bold')
)
#outputOptions(output, 'dt_QAQC', suspendWhenHidden=TRUE)
proxy_dt_QAQC <- DT::dataTableProxy('dt_QAQC')
observeEvent(input$x1_cell_edit, {
info=input$x1_cell_edit
str(info)
i = info$row
j = info$col + 1
v = info$value
# Change Value "v" only IF column = 8 AND logical (T/F)
if(j==ApplyQAQC.column & (toupper(v)=="FALSE" | toupper(v)=="TRUE")) {
dt_QAQC[i,j] <<- DT:::coerceValue(toupper(v), data_QAQC[i,j])
replaceData(proxy_dt_QAQC, data_QAQC, resetPaging=FALSE, rownames=FALSE)
}
#need to update actual table (might be done with above statement)
})
}
)
#devtools::install_github('rstudio/DT@feature/editor') # only need to install once
library(shiny)
library(DT)
library(XLConnect)
shinyApp(
ui = fluidPage(
DT::dataTableOutput('x1')
),
server = function(input, output, session) {
# load my File
data_QAQC <- XLConnect::readWorksheetFromFile("external/DDT_QAQC_Default.xlsx"
, sheet="Methods Table", startRow=6, header=TRUE)
#x = data_QAQC
myCaption <- "Double-click to edit a cell.  'TRUE' and 'FALSE' are the only values allowed.  And only for column 'apply'."
output$x1 = DT::renderDataTable(data_QAQC, server=TRUE, selection = 'none', rownames = FALSE
, caption = myCaption)
#formatStyle(table="x1",columns="apply", backgroundColor='blue', fontWeight = 'bold')
proxy_dt_QAQC = dataTableProxy('x1')
observeEvent(input$x1_cell_edit, {
info = input$x1_cell_edit
str(info)
i = info$row
j = info$col + 1
v = info$value
# Change Value "v" only IF column = 8 AND logical (T/F)
if(j==8 & (toupper(v)=="FALSE" | toupper(v)=="TRUE")) {
data_QAQC[i, j] <<- DT:::coerceValue(toupper(v), data_QAQC[i, j])
replaceData(proxy_dt_QAQC, data_QAQC, resetPaging = FALSE, rownames = FALSE)
}
})
}
)
library(shiny)
library(DT)
library(XLConnect)
#source("external/dataQAQC.R", local=TRUE)
shinyApp(
ui = fluidPage(
DT::dataTableOutput('dt_QAQC')
),
server = function(input, output, session) {
read_data_QAQC <- function(strFile, strSheet, intStartRow) {
XLConnect::readWorksheetFromFile(strFile
, sheet=strSheet
, startRow=intStartRow
, header=TRUE) #, drop=c(1,2))
}
#data_QAQC <- XLConnect::readWorksheetFromFile("external/DDT_QAQC_Default.xlsx", sheet="Methods Table", startRow=6, header=TRUE)
#
data_QAQC <- read_data_QAQC(strFile="external/DDT_QAQC_Default.xlsx", strSheet = "Methods Table", intStartRow=6)
ApplyQAQC.column <- 8
data_QAQC_caption <- "Double-click to edit a cell in column Apply.QAQC (highlighted in green [TRUE] or red
[FALSE]).  Edits are only allowed in this column and only for the values TRUE and FALSE."
output$dt_QAQC = DT::renderDataTable(DT::datatable(data_QAQC
, caption=data_QAQC_caption
, rownames=FALSE
, selection='none'
# , server=TRUE
) %>% formatStyle(columns=ApplyQAQC.column
,target="cell"
,background=styleEqual(c(1,0)
,c('lightgreen','red'))
,fontWeight='bold')
)
#outputOptions(output, 'dt_QAQC', suspendWhenHidden=TRUE)
proxy_dt_QAQC <- DT::dataTableProxy('dt_QAQC')
observeEvent(input$x1_cell_edit, {
info=input$x1_cell_edit
str(info)
i = info$row
j = info$col + 1
v = info$value
# Change Value "v" only IF column = 8 AND logical (T/F)
if(j==ApplyQAQC.column & (toupper(v)=="FALSE" | toupper(v)=="TRUE")) {
dt_QAQC[i,j] <<- DT:::coerceValue(toupper(v), data_QAQC[i,j])
replaceData(proxy_dt_QAQC, data_QAQC, resetPaging=FALSE, rownames=FALSE)
}
#need to update actual table (might be done with above statement)
})
}
)
library(shiny)
library(DT)
library(XLConnect)
#source("external/dataQAQC.R", local=TRUE)
shinyApp(
ui = fluidPage(
DT::dataTableOutput('dt_QAQC')
),
server = function(input, output, session) {
read_data_QAQC <- function(strFile, strSheet, intStartRow) {
XLConnect::readWorksheetFromFile(strFile
, sheet=strSheet
, startRow=intStartRow
, header=TRUE) #, drop=c(1,2))
}
#data_QAQC <- XLConnect::readWorksheetFromFile("external/DDT_QAQC_Default.xlsx", sheet="Methods Table", startRow=6, header=TRUE)
#
data_QAQC <- read_data_QAQC(strFile="external/DDT_QAQC_Default.xlsx", strSheet = "Methods Table", intStartRow=6)
ApplyQAQC.column <- 8
data_QAQC_caption <- "Double-click to edit a cell in column Apply.QAQC (highlighted in green [TRUE] or red
[FALSE]).  Edits are only allowed in this column and only for the values TRUE and FALSE."
output$dt_QAQC = DT::renderDataTable(DT::datatable(data_QAQC
, caption=data_QAQC_caption
, rownames=FALSE
, selection='none'
# , server=TRUE
) %>% formatStyle(columns=ApplyQAQC.column
,target="cell"
,background=styleEqual(c(1,0)
,c('lightgreen','red'))
,fontWeight='bold')
)
#outputOptions(output, 'dt_QAQC', suspendWhenHidden=TRUE)
proxy_dt_QAQC <- DT::dataTableProxy('dt_QAQC')
observeEvent(input$x1_cell_edit, {
info = input$x1_cell_edit
str(info)
i = info$row
j = info$col + 1
v = info$value
# Change Value "v" only IF column = 8 AND logical (T/F)
if(j==ApplyQAQC.column & (toupper(v)=="FALSE" | toupper(v)=="TRUE")) {
dt_QAQC[i,j] <<- DT:::coerceValue(toupper(v), data_QAQC[i,j])
replaceData(proxy_dt_QAQC, data_QAQC, resetPaging=FALSE, rownames=FALSE)
}
#need to update actual table (might be done with above statement)
})
}
)
library(shiny)
library(DT)
library(XLConnect)
#source("external/dataQAQC.R", local=TRUE)
shinyApp(
ui = fluidPage(
DT::dataTableOutput('dt_QAQC')
),
server = function(input, output, session) {
read_data_QAQC <- function(strFile, strSheet, intStartRow) {
XLConnect::readWorksheetFromFile(strFile
, sheet=strSheet
, startRow=intStartRow
, header=TRUE) #, drop=c(1,2))
}
#data_QAQC <- XLConnect::readWorksheetFromFile("external/DDT_QAQC_Default.xlsx", sheet="Methods Table", startRow=6, header=TRUE)
#
data_QAQC <- read_data_QAQC(strFile="external/DDT_QAQC_Default.xlsx", strSheet = "Methods Table", intStartRow=6)
ApplyQAQC.column <- 8
data_QAQC_caption <- "Double-click to edit a cell in column Apply.QAQC (highlighted in green [TRUE] or red
[FALSE]).  Edits are only allowed in this column and only for the values TRUE and FALSE."
output$dt_QAQC = DT::renderDataTable(DT::datatable(data_QAQC
, caption=data_QAQC_caption
, rownames=FALSE
, selection='none'
# , server=TRUE
) %>% formatStyle(columns=ApplyQAQC.column
,target="cell"
,background=styleEqual(c(1,0)
,c('lightgreen','red'))
,fontWeight='bold')
)
#outputOptions(output, 'dt_QAQC', suspendWhenHidden=TRUE)
proxy_dt_QAQC <- DT::dataTableProxy('dt_QAQC')
observeEvent(input$x1_cell_edit, {
info = input$x1_cell_edit
str(info)
i = info$row
j = info$col + 1
v = info$value
# Change Value "v" only IF column = 8 AND logical (T/F)
if(j==8 & (toupper(v)=="FALSE" | toupper(v)=="TRUE")) {
data_QAQC[i, j] <<- DT:::coerceValue(toupper(v), data_QAQC[i, j])
replaceData(proxy_dt_QAQC, data_QAQC, resetPaging = FALSE, rownames = FALSE)
}
#need to update actual table (might be done with above statement)
})
}
)
data_QAQC <- XLConnect::readWorksheetFromFile("external/DDT_QAQC_Default.xlsx"
, sheet="Methods Table", startRow=6, header=TRUE)
library(shiny)
library(DT)
library(XLConnect)
#source("external/dataQAQC.R", local=TRUE)
shinyApp(
ui = fluidPage(
DT::dataTableOutput('dt_QAQC')
),
server = function(input, output, session) {
# read_data_QAQC <- function(strFile, strSheet, intStartRow) {
#             XLConnect::readWorksheetFromFile(strFile
#                                              , sheet=strSheet
#                                              , startRow=intStartRow
#                                              , header=TRUE) #, drop=c(1,2))
# }
#   #data_QAQC <- XLConnect::readWorksheetFromFile("external/DDT_QAQC_Default.xlsx", sheet="Methods Table", startRow=6, header=TRUE)
#   #
# data_QAQC <- read_data_QAQC(strFile="external/DDT_QAQC_Default.xlsx", strSheet = "Methods Table", intStartRow=6)
#
data_QAQC <- XLConnect::readWorksheetFromFile("external/DDT_QAQC_Default.xlsx"
, sheet="Methods Table", startRow=6, header=TRUE)
ApplyQAQC.column <- 8
data_QAQC_caption <- "Double-click to edit a cell in column Apply.QAQC (highlighted in green [TRUE] or red
[FALSE]).  Edits are only allowed in this column and only for the values TRUE and FALSE."
output$dt_QAQC = DT::renderDataTable(DT::datatable(data_QAQC
, caption=data_QAQC_caption
, rownames=FALSE
, selection='none'
# , server=TRUE
) %>% formatStyle(columns=ApplyQAQC.column
,target="cell"
,background=styleEqual(c(1,0)
,c('lightgreen','red'))
,fontWeight='bold')
)
#outputOptions(output, 'dt_QAQC', suspendWhenHidden=TRUE)
proxy_dt_QAQC <- DT::dataTableProxy('dt_QAQC')
observeEvent(input$x1_cell_edit, {
info = input$x1_cell_edit
str(info)
i = info$row
j = info$col + 1
v = info$value
# Change Value "v" only IF column = 8 AND logical (T/F)
if(j==8 & (toupper(v)=="FALSE" | toupper(v)=="TRUE")) {
data_QAQC[i, j] <<- DT:::coerceValue(toupper(v), data_QAQC[i, j])
replaceData(proxy_dt_QAQC, data_QAQC, resetPaging = FALSE, rownames = FALSE)
}
#need to update actual table (might be done with above statement)
})
}
)
library(shiny)
library(DT)
library(XLConnect)
#source("external/dataQAQC.R", local=TRUE)
shinyApp(
ui = fluidPage(
DT::dataTableOutput('dt_QAQC')
),
server = function(input, output, session) {
# read_data_QAQC <- function(strFile, strSheet, intStartRow) {
#             XLConnect::readWorksheetFromFile(strFile
#                                              , sheet=strSheet
#                                              , startRow=intStartRow
#                                              , header=TRUE) #, drop=c(1,2))
# }
#   #data_QAQC <- XLConnect::readWorksheetFromFile("external/DDT_QAQC_Default.xlsx", sheet="Methods Table", startRow=6, header=TRUE)
#   #
# data_QAQC <- read_data_QAQC(strFile="external/DDT_QAQC_Default.xlsx", strSheet = "Methods Table", intStartRow=6)
#
data_QAQC <- XLConnect::readWorksheetFromFile("external/DDT_QAQC_Default.xlsx"
, sheet="Methods Table", startRow=6, header=TRUE)
ApplyQAQC.column <- 8
data_QAQC_caption <- "Double-click to edit a cell in column Apply.QAQC (highlighted in green [TRUE] or red
[FALSE]).  Edits are only allowed in this column and only for the values TRUE and FALSE."
output$dt_QAQC = DT::renderDataTable(DT::datatable(data_QAQC
, caption=data_QAQC_caption
, rownames=FALSE
, selection='none'
# , server=TRUE
) %>% formatStyle(columns=ApplyQAQC.column
,target="cell"
,background=styleEqual(c(1,0)
,c('lightgreen','red'))
,fontWeight='bold')
)
#outputOptions(output, 'dt_QAQC', suspendWhenHidden=TRUE)
proxy_dt_QAQC <- DT::dataTableProxy('dt_QAQC')
observeEvent(input$dt_QAQC_cell_edit, {
info = input$dt_QAQC_cell_edit
str(info)
i = info$row
j = info$col + 1
v = info$value
# Change Value "v" only IF column = 8 AND logical (T/F)
if(j==8 & (toupper(v)=="FALSE" | toupper(v)=="TRUE")) {
data_QAQC[i, j] <<- DT:::coerceValue(toupper(v), data_QAQC[i, j])
replaceData(proxy_dt_QAQC, data_QAQC, resetPaging = FALSE, rownames = FALSE)
}
#need to update actual table (might be done with above statement)
})
}
)
library(shiny)
library(DT)
library(XLConnect)
source("external/dataQAQC.R", local=TRUE)
shinyApp(
ui = fluidPage(
DT::dataTableOutput('dt_QAQC')
),
server = function(input, output, session) {
# read_data_QAQC <- function(strFile, strSheet, intStartRow) {
#             XLConnect::readWorksheetFromFile(strFile
#                                              , sheet=strSheet
#                                              , startRow=intStartRow
#                                              , header=TRUE) #, drop=c(1,2))
# }
#   #data_QAQC <- XLConnect::readWorksheetFromFile("external/DDT_QAQC_Default.xlsx", sheet="Methods Table", startRow=6, header=TRUE)
#   #
# data_QAQC <- read_data_QAQC(strFile="external/DDT_QAQC_Default.xlsx", strSheet = "Methods Table", intStartRow=6)
#
#data_QAQC <- XLConnect::readWorksheetFromFile("external/DDT_QAQC_Default.xlsx"
, sheet="Methods Table", startRow=6, header=TRUE)
library(shiny)
library(DT)
library(XLConnect)
source("external/dataQAQC.R", local=TRUE)
shinyApp(
ui = fluidPage(
DT::dataTableOutput('dt_QAQC')
),
server = function(input, output, session) {
# read_data_QAQC <- function(strFile, strSheet, intStartRow) {
#             XLConnect::readWorksheetFromFile(strFile
#                                              , sheet=strSheet
#                                              , startRow=intStartRow
#                                              , header=TRUE) #, drop=c(1,2))
# }
#   #data_QAQC <- XLConnect::readWorksheetFromFile("external/DDT_QAQC_Default.xlsx", sheet="Methods Table", startRow=6, header=TRUE)
#   #
# data_QAQC <- read_data_QAQC(strFile="external/DDT_QAQC_Default.xlsx", strSheet = "Methods Table", intStartRow=6)
#
#data_QAQC <- XLConnect::readWorksheetFromFile("external/DDT_QAQC_Default.xlsx"
#                                          , sheet="Methods Table", startRow=6, header=TRUE)
ApplyQAQC.column <- 8
data_QAQC_caption <- "Double-click to edit a cell in column Apply.QAQC (highlighted in green [TRUE] or red
[FALSE]).  Edits are only allowed in this column and only for the values TRUE and FALSE."
output$dt_QAQC = DT::renderDataTable(DT::datatable(data_QAQC
, caption=data_QAQC_caption
, rownames=FALSE
, selection='none'
# , server=TRUE
) %>% formatStyle(columns=ApplyQAQC.column
,target="cell"
,background=styleEqual(c(1,0)
,c('lightgreen','red'))
,fontWeight='bold')
)
#outputOptions(output, 'dt_QAQC', suspendWhenHidden=TRUE)
proxy_dt_QAQC <- DT::dataTableProxy('dt_QAQC')
observeEvent(input$dt_QAQC_cell_edit, {
info = input$dt_QAQC_cell_edit
str(info)
i = info$row
j = info$col + 1
v = info$value
# Change Value "v" only IF column = 8 AND logical (T/F)
if(j==8 & (toupper(v)=="FALSE" | toupper(v)=="TRUE")) {
data_QAQC[i, j] <<- DT:::coerceValue(toupper(v), data_QAQC[i, j])
replaceData(proxy_dt_QAQC, data_QAQC, resetPaging = FALSE, rownames = FALSE)
}
#need to update actual table (might be done with above statement)
})
}
)
runApp()
runApp()
shiny::runApp()
?table
myFields[-6]
table(myData[,myFields[-6]],myData[,myFields[6]])
head(mtcars)
myDir <- file.path("C:","Users","Erik.Leppo","Downloads")
myFiles <- list.files(path=myDir, pattern="DDT_Data_*")
myFiles
myData   <- readRDS(file.path(myDir,myFiles[5]))
# 1. get all combos, include number and min/max
myFields <- c("ActivityMediaName", "CharacteristicName", "ResultSampleFractionText"
, "USGSPCode", "Unit", "Result")
myData4QAQC <- myData[,myFields]
myData.QAQC <- unique(myData4QAQC[,-6])
library(dplyr)
myData4QAQC %>%
group_by(ActivityMediaName) %>% #, CharacteristicName, ResultSampleFractionText, USGSPCode)) %>%
summarise(min=min(Result),max=max(Result),n=n())
myData4QAQC %>%
group_by(ActivityMediaName) %>% #, CharacteristicName, ResultSampleFractionText, USGSPCode)) %>%
summarise(min=min(Result,na.rm),max=max(Result,na.rm),n=n())
myData4QAQC %>%
group_by(c(ActivityMediaName, CharacteristicName)) %>% #, CharacteristicName, ResultSampleFractionText, USGSPCode)) %>%
summarise(min=min(Result),max=max(Result),n=n())
myData4QAQC %>%
group_by(c(ActivityMediaName, ResultSampleFractionText)) %>% #, CharacteristicName, ResultSampleFractionText, USGSPCode)) %>%
summarise(min=min(Result),max=max(Result),n=n())
myData4QAQC %>%
group_by(ActivityMediaName, ResultSampleFractionText) %>% #, CharacteristicName, ResultSampleFractionText, USGSPCode)) %>%
summarise(min=min(Result),max=max(Result),n=n())
myData4QAQC %>%
group_by(ActivityMediaName, CharacteristicName, ResultSampleFractionText, USGSPCode, Unit) %>%
summarise(min=min(Result),max=max(Result),n=n())
myData.QAQC.Summary <- myData4QAQC %>%
group_by(ActivityMediaName, CharacteristicName, ResultSampleFractionText, USGSPCode, Unit) %>%
summarise(min=min(Result),max=max(Result),n=n())
View(myData.QAQC.Summary)
myData.QAQC.Summary <- myData4QAQC %>%
group_by(ActivityMediaName, CharacteristicName, ResultSampleFractionText, USGSPCode, Unit) %>%
summarise(n=n(),min=min(Result),max=max(Result))
View(myData.QAQC.Summary)
?max
myData.QAQC.Summary <- myData4QAQC %>%
group_by(ActivityMediaName, CharacteristicName, ResultSampleFractionText, USGSPCode, Unit) %>%
summarise(n=n(),min=min(Result,na.rm=TRUE),max=max(Result,na.rm=TRUE))
View(myData.QAQC.Summary)
runApp()
runApp()
runApp()
names(all_data())
myFields
myFields %in% names(all_data())
myData4QAQC <- myData[,myFields]
myData.QAQC.Summary <- myData4QAQC %>%
group_by(ActivityMediaName, CharacteristicName, ResultSampleFractionText, USGSPCode, Unit) %>%
summarise(n=n(),min=min(Result,na.rm=TRUE),max=max(Result,na.rm=TRUE))
View(myData.QAQC.Summary)
?merge
runApp()
x <- merge(myData.QAQC.Summary, dt_QAQC()[c(myFields, "Apply.QAQC")], by=myFields, all.x=TRUE)
x <- merge(myData.QAQC.Summary, dt_QAQC[c(myFields, "Apply.QAQC")], by=myFields, all.x=TRUE)
x <- merge(myData.QAQC.Summary, data_QAQC[c(myFields, "Apply.QAQC")], by=myFields, all.x=TRUE)
head(data_QAQC)
head(data_QAQC())
dim('dt_QAQC')
str('dt_QAQC')
str(dt_QAQC)
str(input$dt_QAQC)
runApp()
