if(j==8 & (toupper(v)=="FALSE" | toupper(v)=="TRUE")) {
data_QAQC[i, j] <<- DT:::coerceValue(toupper(v), data_QAQC[i, j])
replaceData(proxy_dt_QAQC, data_QAQC, resetPaging = FALSE, rownames = FALSE)
}
})
}
)
library(shiny)
library(DT)
library(XLConnect)
#source("external/dataQAQC.R", local=TRUE)
shinyApp(
ui = fluidPage(
DT::dataTableOutput('dt_QAQC')
),
server = function(input, output, session) {
read_data_QAQC <- function(strFile, strSheet, intStartRow) {
XLConnect::readWorksheetFromFile(strFile
, sheet=strSheet
, startRow=intStartRow
, header=TRUE) #, drop=c(1,2))
}
#data_QAQC <- XLConnect::readWorksheetFromFile("external/DDT_QAQC_Default.xlsx", sheet="Methods Table", startRow=6, header=TRUE)
#
data_QAQC <- read_data_QAQC(strFile="external/DDT_QAQC_Default.xlsx", strSheet = "Methods Table", intStartRow=6)
ApplyQAQC.column <- 8
data_QAQC_caption <- "Double-click to edit a cell in column Apply.QAQC (highlighted in green [TRUE] or red
[FALSE]).  Edits are only allowed in this column and only for the values TRUE and FALSE."
output$dt_QAQC = DT::renderDataTable(DT::datatable(data_QAQC
, caption=data_QAQC_caption
, rownames=FALSE
, selection='none'
# , server=TRUE
) %>% formatStyle(columns=ApplyQAQC.column
,target="cell"
,background=styleEqual(c(1,0)
,c('lightgreen','red'))
,fontWeight='bold')
)
#outputOptions(output, 'dt_QAQC', suspendWhenHidden=TRUE)
proxy_dt_QAQC <- DT::dataTableProxy('dt_QAQC')
observeEvent(input$x1_cell_edit, {
info=input$x1_cell_edit
str(info)
i = info$row
j = info$col + 1
v = info$value
# Change Value "v" only IF column = 8 AND logical (T/F)
if(j==ApplyQAQC.column & (toupper(v)=="FALSE" | toupper(v)=="TRUE")) {
dt_QAQC[i,j] <<- DT:::coerceValue(toupper(v), data_QAQC[i,j])
replaceData(proxy_dt_QAQC, data_QAQC, resetPaging=FALSE, rownames=FALSE)
}
#need to update actual table (might be done with above statement)
})
}
)
library(shiny)
library(DT)
library(XLConnect)
#source("external/dataQAQC.R", local=TRUE)
shinyApp(
ui = fluidPage(
DT::dataTableOutput('dt_QAQC')
),
server = function(input, output, session) {
read_data_QAQC <- function(strFile, strSheet, intStartRow) {
XLConnect::readWorksheetFromFile(strFile
, sheet=strSheet
, startRow=intStartRow
, header=TRUE) #, drop=c(1,2))
}
#data_QAQC <- XLConnect::readWorksheetFromFile("external/DDT_QAQC_Default.xlsx", sheet="Methods Table", startRow=6, header=TRUE)
#
data_QAQC <- read_data_QAQC(strFile="external/DDT_QAQC_Default.xlsx", strSheet = "Methods Table", intStartRow=6)
ApplyQAQC.column <- 8
data_QAQC_caption <- "Double-click to edit a cell in column Apply.QAQC (highlighted in green [TRUE] or red
[FALSE]).  Edits are only allowed in this column and only for the values TRUE and FALSE."
output$dt_QAQC = DT::renderDataTable(DT::datatable(data_QAQC
, caption=data_QAQC_caption
, rownames=FALSE
, selection='none'
# , server=TRUE
) %>% formatStyle(columns=ApplyQAQC.column
,target="cell"
,background=styleEqual(c(1,0)
,c('lightgreen','red'))
,fontWeight='bold')
)
#outputOptions(output, 'dt_QAQC', suspendWhenHidden=TRUE)
proxy_dt_QAQC <- DT::dataTableProxy('dt_QAQC')
observeEvent(input$x1_cell_edit, {
info = input$x1_cell_edit
str(info)
i = info$row
j = info$col + 1
v = info$value
# Change Value "v" only IF column = 8 AND logical (T/F)
if(j==ApplyQAQC.column & (toupper(v)=="FALSE" | toupper(v)=="TRUE")) {
dt_QAQC[i,j] <<- DT:::coerceValue(toupper(v), data_QAQC[i,j])
replaceData(proxy_dt_QAQC, data_QAQC, resetPaging=FALSE, rownames=FALSE)
}
#need to update actual table (might be done with above statement)
})
}
)
library(shiny)
library(DT)
library(XLConnect)
#source("external/dataQAQC.R", local=TRUE)
shinyApp(
ui = fluidPage(
DT::dataTableOutput('dt_QAQC')
),
server = function(input, output, session) {
read_data_QAQC <- function(strFile, strSheet, intStartRow) {
XLConnect::readWorksheetFromFile(strFile
, sheet=strSheet
, startRow=intStartRow
, header=TRUE) #, drop=c(1,2))
}
#data_QAQC <- XLConnect::readWorksheetFromFile("external/DDT_QAQC_Default.xlsx", sheet="Methods Table", startRow=6, header=TRUE)
#
data_QAQC <- read_data_QAQC(strFile="external/DDT_QAQC_Default.xlsx", strSheet = "Methods Table", intStartRow=6)
ApplyQAQC.column <- 8
data_QAQC_caption <- "Double-click to edit a cell in column Apply.QAQC (highlighted in green [TRUE] or red
[FALSE]).  Edits are only allowed in this column and only for the values TRUE and FALSE."
output$dt_QAQC = DT::renderDataTable(DT::datatable(data_QAQC
, caption=data_QAQC_caption
, rownames=FALSE
, selection='none'
# , server=TRUE
) %>% formatStyle(columns=ApplyQAQC.column
,target="cell"
,background=styleEqual(c(1,0)
,c('lightgreen','red'))
,fontWeight='bold')
)
#outputOptions(output, 'dt_QAQC', suspendWhenHidden=TRUE)
proxy_dt_QAQC <- DT::dataTableProxy('dt_QAQC')
observeEvent(input$x1_cell_edit, {
info = input$x1_cell_edit
str(info)
i = info$row
j = info$col + 1
v = info$value
# Change Value "v" only IF column = 8 AND logical (T/F)
if(j==8 & (toupper(v)=="FALSE" | toupper(v)=="TRUE")) {
data_QAQC[i, j] <<- DT:::coerceValue(toupper(v), data_QAQC[i, j])
replaceData(proxy_dt_QAQC, data_QAQC, resetPaging = FALSE, rownames = FALSE)
}
#need to update actual table (might be done with above statement)
})
}
)
data_QAQC <- XLConnect::readWorksheetFromFile("external/DDT_QAQC_Default.xlsx"
, sheet="Methods Table", startRow=6, header=TRUE)
library(shiny)
library(DT)
library(XLConnect)
#source("external/dataQAQC.R", local=TRUE)
shinyApp(
ui = fluidPage(
DT::dataTableOutput('dt_QAQC')
),
server = function(input, output, session) {
# read_data_QAQC <- function(strFile, strSheet, intStartRow) {
#             XLConnect::readWorksheetFromFile(strFile
#                                              , sheet=strSheet
#                                              , startRow=intStartRow
#                                              , header=TRUE) #, drop=c(1,2))
# }
#   #data_QAQC <- XLConnect::readWorksheetFromFile("external/DDT_QAQC_Default.xlsx", sheet="Methods Table", startRow=6, header=TRUE)
#   #
# data_QAQC <- read_data_QAQC(strFile="external/DDT_QAQC_Default.xlsx", strSheet = "Methods Table", intStartRow=6)
#
data_QAQC <- XLConnect::readWorksheetFromFile("external/DDT_QAQC_Default.xlsx"
, sheet="Methods Table", startRow=6, header=TRUE)
ApplyQAQC.column <- 8
data_QAQC_caption <- "Double-click to edit a cell in column Apply.QAQC (highlighted in green [TRUE] or red
[FALSE]).  Edits are only allowed in this column and only for the values TRUE and FALSE."
output$dt_QAQC = DT::renderDataTable(DT::datatable(data_QAQC
, caption=data_QAQC_caption
, rownames=FALSE
, selection='none'
# , server=TRUE
) %>% formatStyle(columns=ApplyQAQC.column
,target="cell"
,background=styleEqual(c(1,0)
,c('lightgreen','red'))
,fontWeight='bold')
)
#outputOptions(output, 'dt_QAQC', suspendWhenHidden=TRUE)
proxy_dt_QAQC <- DT::dataTableProxy('dt_QAQC')
observeEvent(input$x1_cell_edit, {
info = input$x1_cell_edit
str(info)
i = info$row
j = info$col + 1
v = info$value
# Change Value "v" only IF column = 8 AND logical (T/F)
if(j==8 & (toupper(v)=="FALSE" | toupper(v)=="TRUE")) {
data_QAQC[i, j] <<- DT:::coerceValue(toupper(v), data_QAQC[i, j])
replaceData(proxy_dt_QAQC, data_QAQC, resetPaging = FALSE, rownames = FALSE)
}
#need to update actual table (might be done with above statement)
})
}
)
library(shiny)
library(DT)
library(XLConnect)
#source("external/dataQAQC.R", local=TRUE)
shinyApp(
ui = fluidPage(
DT::dataTableOutput('dt_QAQC')
),
server = function(input, output, session) {
# read_data_QAQC <- function(strFile, strSheet, intStartRow) {
#             XLConnect::readWorksheetFromFile(strFile
#                                              , sheet=strSheet
#                                              , startRow=intStartRow
#                                              , header=TRUE) #, drop=c(1,2))
# }
#   #data_QAQC <- XLConnect::readWorksheetFromFile("external/DDT_QAQC_Default.xlsx", sheet="Methods Table", startRow=6, header=TRUE)
#   #
# data_QAQC <- read_data_QAQC(strFile="external/DDT_QAQC_Default.xlsx", strSheet = "Methods Table", intStartRow=6)
#
data_QAQC <- XLConnect::readWorksheetFromFile("external/DDT_QAQC_Default.xlsx"
, sheet="Methods Table", startRow=6, header=TRUE)
ApplyQAQC.column <- 8
data_QAQC_caption <- "Double-click to edit a cell in column Apply.QAQC (highlighted in green [TRUE] or red
[FALSE]).  Edits are only allowed in this column and only for the values TRUE and FALSE."
output$dt_QAQC = DT::renderDataTable(DT::datatable(data_QAQC
, caption=data_QAQC_caption
, rownames=FALSE
, selection='none'
# , server=TRUE
) %>% formatStyle(columns=ApplyQAQC.column
,target="cell"
,background=styleEqual(c(1,0)
,c('lightgreen','red'))
,fontWeight='bold')
)
#outputOptions(output, 'dt_QAQC', suspendWhenHidden=TRUE)
proxy_dt_QAQC <- DT::dataTableProxy('dt_QAQC')
observeEvent(input$dt_QAQC_cell_edit, {
info = input$dt_QAQC_cell_edit
str(info)
i = info$row
j = info$col + 1
v = info$value
# Change Value "v" only IF column = 8 AND logical (T/F)
if(j==8 & (toupper(v)=="FALSE" | toupper(v)=="TRUE")) {
data_QAQC[i, j] <<- DT:::coerceValue(toupper(v), data_QAQC[i, j])
replaceData(proxy_dt_QAQC, data_QAQC, resetPaging = FALSE, rownames = FALSE)
}
#need to update actual table (might be done with above statement)
})
}
)
library(shiny)
library(DT)
library(XLConnect)
source("external/dataQAQC.R", local=TRUE)
shinyApp(
ui = fluidPage(
DT::dataTableOutput('dt_QAQC')
),
server = function(input, output, session) {
# read_data_QAQC <- function(strFile, strSheet, intStartRow) {
#             XLConnect::readWorksheetFromFile(strFile
#                                              , sheet=strSheet
#                                              , startRow=intStartRow
#                                              , header=TRUE) #, drop=c(1,2))
# }
#   #data_QAQC <- XLConnect::readWorksheetFromFile("external/DDT_QAQC_Default.xlsx", sheet="Methods Table", startRow=6, header=TRUE)
#   #
# data_QAQC <- read_data_QAQC(strFile="external/DDT_QAQC_Default.xlsx", strSheet = "Methods Table", intStartRow=6)
#
#data_QAQC <- XLConnect::readWorksheetFromFile("external/DDT_QAQC_Default.xlsx"
, sheet="Methods Table", startRow=6, header=TRUE)
library(shiny)
library(DT)
library(XLConnect)
source("external/dataQAQC.R", local=TRUE)
shinyApp(
ui = fluidPage(
DT::dataTableOutput('dt_QAQC')
),
server = function(input, output, session) {
# read_data_QAQC <- function(strFile, strSheet, intStartRow) {
#             XLConnect::readWorksheetFromFile(strFile
#                                              , sheet=strSheet
#                                              , startRow=intStartRow
#                                              , header=TRUE) #, drop=c(1,2))
# }
#   #data_QAQC <- XLConnect::readWorksheetFromFile("external/DDT_QAQC_Default.xlsx", sheet="Methods Table", startRow=6, header=TRUE)
#   #
# data_QAQC <- read_data_QAQC(strFile="external/DDT_QAQC_Default.xlsx", strSheet = "Methods Table", intStartRow=6)
#
#data_QAQC <- XLConnect::readWorksheetFromFile("external/DDT_QAQC_Default.xlsx"
#                                          , sheet="Methods Table", startRow=6, header=TRUE)
ApplyQAQC.column <- 8
data_QAQC_caption <- "Double-click to edit a cell in column Apply.QAQC (highlighted in green [TRUE] or red
[FALSE]).  Edits are only allowed in this column and only for the values TRUE and FALSE."
output$dt_QAQC = DT::renderDataTable(DT::datatable(data_QAQC
, caption=data_QAQC_caption
, rownames=FALSE
, selection='none'
# , server=TRUE
) %>% formatStyle(columns=ApplyQAQC.column
,target="cell"
,background=styleEqual(c(1,0)
,c('lightgreen','red'))
,fontWeight='bold')
)
#outputOptions(output, 'dt_QAQC', suspendWhenHidden=TRUE)
proxy_dt_QAQC <- DT::dataTableProxy('dt_QAQC')
observeEvent(input$dt_QAQC_cell_edit, {
info = input$dt_QAQC_cell_edit
str(info)
i = info$row
j = info$col + 1
v = info$value
# Change Value "v" only IF column = 8 AND logical (T/F)
if(j==8 & (toupper(v)=="FALSE" | toupper(v)=="TRUE")) {
data_QAQC[i, j] <<- DT:::coerceValue(toupper(v), data_QAQC[i, j])
replaceData(proxy_dt_QAQC, data_QAQC, resetPaging = FALSE, rownames = FALSE)
}
#need to update actual table (might be done with above statement)
})
}
)
runApp()
runApp()
shiny::runApp()
?table
myFields[-6]
table(myData[,myFields[-6]],myData[,myFields[6]])
head(mtcars)
myDir <- file.path("C:","Users","Erik.Leppo","Downloads")
myFiles <- list.files(path=myDir, pattern="DDT_Data_*")
myFiles
myData   <- readRDS(file.path(myDir,myFiles[5]))
# 1. get all combos, include number and min/max
myFields <- c("ActivityMediaName", "CharacteristicName", "ResultSampleFractionText"
, "USGSPCode", "Unit", "Result")
myData4QAQC <- myData[,myFields]
myData.QAQC <- unique(myData4QAQC[,-6])
library(dplyr)
myData4QAQC %>%
group_by(ActivityMediaName) %>% #, CharacteristicName, ResultSampleFractionText, USGSPCode)) %>%
summarise(min=min(Result),max=max(Result),n=n())
myData4QAQC %>%
group_by(ActivityMediaName) %>% #, CharacteristicName, ResultSampleFractionText, USGSPCode)) %>%
summarise(min=min(Result,na.rm),max=max(Result,na.rm),n=n())
myData4QAQC %>%
group_by(c(ActivityMediaName, CharacteristicName)) %>% #, CharacteristicName, ResultSampleFractionText, USGSPCode)) %>%
summarise(min=min(Result),max=max(Result),n=n())
myData4QAQC %>%
group_by(c(ActivityMediaName, ResultSampleFractionText)) %>% #, CharacteristicName, ResultSampleFractionText, USGSPCode)) %>%
summarise(min=min(Result),max=max(Result),n=n())
myData4QAQC %>%
group_by(ActivityMediaName, ResultSampleFractionText) %>% #, CharacteristicName, ResultSampleFractionText, USGSPCode)) %>%
summarise(min=min(Result),max=max(Result),n=n())
myData4QAQC %>%
group_by(ActivityMediaName, CharacteristicName, ResultSampleFractionText, USGSPCode, Unit) %>%
summarise(min=min(Result),max=max(Result),n=n())
myData.QAQC.Summary <- myData4QAQC %>%
group_by(ActivityMediaName, CharacteristicName, ResultSampleFractionText, USGSPCode, Unit) %>%
summarise(min=min(Result),max=max(Result),n=n())
View(myData.QAQC.Summary)
myData.QAQC.Summary <- myData4QAQC %>%
group_by(ActivityMediaName, CharacteristicName, ResultSampleFractionText, USGSPCode, Unit) %>%
summarise(n=n(),min=min(Result),max=max(Result))
View(myData.QAQC.Summary)
?max
myData.QAQC.Summary <- myData4QAQC %>%
group_by(ActivityMediaName, CharacteristicName, ResultSampleFractionText, USGSPCode, Unit) %>%
summarise(n=n(),min=min(Result,na.rm=TRUE),max=max(Result,na.rm=TRUE))
View(myData.QAQC.Summary)
runApp()
runApp()
runApp()
names(all_data())
myFields
myFields %in% names(all_data())
myData4QAQC <- myData[,myFields]
myData.QAQC.Summary <- myData4QAQC %>%
group_by(ActivityMediaName, CharacteristicName, ResultSampleFractionText, USGSPCode, Unit) %>%
summarise(n=n(),min=min(Result,na.rm=TRUE),max=max(Result,na.rm=TRUE))
View(myData.QAQC.Summary)
?merge
runApp()
x <- merge(myData.QAQC.Summary, dt_QAQC()[c(myFields, "Apply.QAQC")], by=myFields, all.x=TRUE)
x <- merge(myData.QAQC.Summary, dt_QAQC[c(myFields, "Apply.QAQC")], by=myFields, all.x=TRUE)
x <- merge(myData.QAQC.Summary, data_QAQC[c(myFields, "Apply.QAQC")], by=myFields, all.x=TRUE)
head(data_QAQC)
head(data_QAQC())
dim('dt_QAQC')
str('dt_QAQC')
str(dt_QAQC)
str(input$dt_QAQC)
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
q <- input$LoadDataFile
# Error check
if(is.null(q)) return(NULL)
# define list
data_load <- readRDS(q$datapath)
all_data <- data_load
dim(all_data)
dim(data_load)
data_load <- readRDS(q$datapath)
dim(data_load)
?readRDS
q$datapath
q
q$name
str(q)
str(all_data)
View(data.frame(all_data()))
runApp()
runApp()
is.null(input$LoadDataFile)
q <- input$LoadDataFile
# Error check
if(is.null(q)) return(NULL)
# define list
data_load <- readRDS(q$datapath)
data.frame(data_load)
runApp()
runApp()
data <- all_data()
metadate <- data.table(x = "Date:", y = paste(Sys.time()))
runApp()
metadate
metadate <- data.table(x = "Date:", y = paste(Sys.time()))
metadate
metadata <- data.table(x = "Dataset:", y = "All data")
metaurl <- data.table(x = "URL:", y = url_display())
metanondet <- data.table(x = "Method for non-detects:", y = non_detect_method())
metaorg <- data.table(x = "Number of organizations:", y = length(unique(data$Organization)))
metastat <- data.table(x = "Number of stations:", y = length(unique(data$Station)))
metaparam <- data.table(x = 'Number of characteristics:', y = length(unique(data$Characteristic)))
metarec <- data.table(x = "Number of records:", y = nrow(data))
metabr <- data.table(x = "", y = "")
metabr2 <- data.table(x = "---------------------------------------", y = "")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
data_load <- read.delim(q$datapath, row.names=FALSE, skip=10)
data_load <- read.table(q$datapath, skip=10)
q$datapath
q <- input$LoadDataFile
myDir <- file.path("C:","Users","Erik.Leppo","Downloads")
myDir <- file.path("C:","Users","Erik.Leppo","Downloads")
myFiles <- list.files(path=myDir, pattern=" *.tsv")
myFiles
myData   <- read.delim(file.path(myDir,myFiles[1]))
View(myData)
myData   <- read.delim(file.path(myDir,myFiles[1]),skip=10)
View(myData)
dim(myData)
myData.URL <- read.delim(file.path(myDir,myFiles[1]),skip=2,nrows=1)
myData.URL
myData4URL[1,2]
myData4URL <- read.delim(file.path(myDir,myFiles[1]),skip=2,nrows=1)
myData.URL <- myData4URL[1,2]
myData.URL
myData4URL <- read.delim(file.path(myDir,myFiles[1]),skip=2,nrows=1, col.names=FALSE)
myData4URL
myData.Meta <- read.delim(file.path(myDir,myFiles[1]),nrows=9, col.names=FALSE)
View(myData.Meta)
# read only some lines
myData.Meta <- read.delim(file.path(myDir,myFiles[1]),nrows=9, col.names=FALSE
, col.names=c("Meta.Field","Meta.Value"))
myData.Meta <- read.delim(file.path(myDir,myFiles[1]),nrows=9,
, col.names=c("Meta.Field","Meta.Value"))
View(myData.Meta)
myData.Meta <- read.delim(file.path(myDir,myFiles[1]),nrows=9, header=FALSE
, col.names=c("Meta.Field","Meta.Value"))
View(myData.Meta)
myData.URL <- myData.Meta[3,2]
myData.URL
droplevels(myData.Meta)
myData.Meta <- read.delim(file.path(myDir,myFiles[1]),nrows=9, header=FALSE
, col.names=c("Meta.Field","Meta.Value"))
myData.Meta <- droplevels(myData.Meta)
myData.URL <- myData.Meta[3,2]
myData.URL
myData.URL <- droplevels(myData.Meta[3,2])
myData.URL
str(myData.Meta)
myData.URL <- factor(droplevels(myData.Meta[3,2]))
myData.URL
?as.character
myData.URL <- as.character(factor(droplevels(myData.Meta[3,2])))
myData.URL
myData.URL <- as.character(myData.Meta[3,2])
myData.URL
runApp()
runApp()
