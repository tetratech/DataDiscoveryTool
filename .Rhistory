output$x1 = DT::renderDataTable(x, selection = 'none', rownames = FALSE)
proxy = dataTableProxy('x1')
observeEvent(input$x1_cell_edit, {
info = input$x1_cell_edit
str(info)
i = info$row
j = info$col + 1
v = info$value
x[i, j] <<- DT:::coerceValue(v, x[i, j])
replaceData(proxy, x, resetPaging = FALSE, rownames = FALSE)
})
}
)
runApp()
runApp()
runApp()
runApp()
devtools::install_github('rstudio/DT@feature/editor')
devtools::install_github('rstudio/DT@feature/editor')
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
data_load <- readRDS(q$datapath)
dim(all_data())
all_data() <- data_load
data_load <- readRDS(q$datapath)
runApp()
data_load <- readRDS(q$datapath)
dim(data_load)
all_data() <- data_load
dim(all_data())
runApp()
runApp()
data_load <- readRDS(q$datapath)
dim(data_load)
data_dt <- data_load
runApp()
runApp()
data_load <- readRDS(q$datapath)
dim(data_load)
dim(data())
dim(all_data)
dim(data_dt)
dim(all_data())
dim(data_dt())
all_data() <- data_load
q
dim(data_load)
data <- data.table(data_load)
dim(data())
names(data_load)
names(data)
names(data())
names(all_data)
names(all_data())
runApp()
val$data <- data_load
data_load <- readRDS(q$datapath)
val$data <- data_load
data()
data_dt()
all_data()
dim(val$data)
data_load <- readRDS(q$datapath)
dim(data_load)
data_load <- readRDS(q$datapath)
dim(data_load)
q
q
observeEvent(input$UpdateData, {
# Get Query File specs
q <- input$LoadDataFile
# Error check
if(is.null(q)) return(NULL)
# define list
data_load <- readRDS(q$datapath)
}
}
}
library(DT)
library(httr)
library(shiny)
runApp()
runApp()
is.reactive(data)
is.reactive(data())
is.reactive(data.dt)
is.reactive(data_dt)
is.reactive(data)
runApp()
dim(data_load)
dim(data)
dim(data())
data()
x<-data()
dim(x)
x<-data_load
dim(x)
runApp()
runApp()
runApp()
runApp()
attributes(data_load)
attributes(data())
str(data())
?sink
sink("sink.attributes.data.txt",split=TRUE)
attributes(data())
dim(data())
runApp()
runApp()
runApp()
runApp()
data_load <- readRDS(q$datapath)
dim(data_load)
dim(data())
data()$siteInfo
data$siteInfo
attributes(data())
data$queryTime
data()$queryTime
sink()
str(data())
str(data_load)
?save
getwd()
strFile <- "_test.rda"
save(data(),file=strFile)
dim(data())
save(file="DDT_IMAGE_TESTsmall.RData")
runApp()
dim(data())
getwd()
load("DDT_IMAGE_TESTsmall.RData")
dim(data())
dim(data_load)
data_load <- readRDS(q$datapath)
save("test.RDA")
?save
ls(all.names=TRUE)
list=ls(all.names=TRUE)
list
runApp()
data_load <- readRDS(q$datapath)
dim(data())
dim(all_data())
dim(data_dt)
dim(data_dt())
attributes(all_data())
attributes(data_dt())
dim(data())
data<-head(data())
head(data)
dim(data)
dim(data())
dim(data())
str(data())
data()$CountryCode
data()$data
data()$statecode
data()$queryTime
attributes(data())
data()$url
data()$variableInfo
data()
str(data())
dim(data())
is.data.frame(data())
is.list(data())
is.object(data())
x<-data()
str(x)
runApp()
runApp()
q
x <- file.path("C:","Users","Erik.Leppo","Downloads","DDT_Data_TESTsmall_data.rds")
data_load <- readRDS(strFile)
data_load <- readRDS(x)
x <- file.path("C:","Users","Erik.Leppo","Downloads","DDT_Data_TESTsmall_data.rds")
data_load <- readRDS(x)
dim(data_load)
dim(data())
attributes(data())
runApp()
dim(data_load)
dim(data())
data()$siteInfo
data$siteInfo
str(data())
str(data_load)
data() <- data_load
str(val$data)
val$data
str(data_load)
str(data())
?reactiveValues
values$data
is.reactive(data())
is.reactivevalues(data())
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
output$data
data()
data_load <- readRDS(q$datapath)
dim(data_load)
dim(data())
showReactLog()
serverInfo()
shiny::runApp()
shiny::runApp()
ifelse(as.numeric(R.Version()$major)<3,
{writeLines("You are running an old version of R. \nPlease Update to R Version 3.2 or higher. \nThe Quick Start Guide provides step by step instructions to update R.")},{
#ifelse(as.numeric(R.Version()$major)==3 & as.numeric(R.Version()$minor)<2.1,
#{writeLines("You are running an old version of R. \nPlease Update to R Version 3.2.1 or higher. \nThe Quick Start Guide provides step by step instructions to update R.")}, {
# Install packages if needed
if ("dataRetrieval" %in% rownames(installed.packages()) ){
packinfo<-installed.packages(fields = c("Package", "Version"))
if (as.numeric(substr(packinfo["dataRetrieval", "Version"], 1, 3))<2.3){
remove.packages("dataRetrieval")
install.packages("dataRetrieval", repos='http://cran.cnr.Berkeley.edu')
}
}
packageNeeds <- c('shiny', 'shinyBS', 'data.table', 'DT',
'dplyr', 'dataRetrieval', 'devtools', 'httr',
'ggplot2', 'stringr', 'scales')
packageNeeds <- packageNeeds[!packageNeeds %in% rownames(installed.packages())]
if(length(packageNeeds)>0){
install.packages(packageNeeds, repos='http://cran.cnr.Berkeley.edu')
}
devPackages<-c("leaflet", "rCharts")
devPackages <- devPackages[!devPackages %in% rownames(installed.packages())]
if (length(devPackages)>0){
require(devtools)
if ("rCharts" %in% devPackages){
devtools::install_github('ramnathv/rCharts')
}
if("leaflet" %in% devPackages){
devtools::install_github("rstudio/leaflet")
}
}
## run the app
require(shiny)
runApp(launch.browser = T)
})
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
tabPanel("Query Data",
fluidPage(
h1("Select filters to build your data query", style  = "text-align:center"),
fluidRow(br()),
fluidRow(wellPanel(bsCollapse(multiple = TRUE, open = "col1", id = "collapse1",
bsCollapsePanel(h3("Location", style  = "text-align:center"),
wellPanel( style = "overflow: auto;",
column( 4,
h3("Place"),
selectizeInput("state", label=p("Choose a State"),
choices = as.character(states$desc) , multiple = TRUE),
bsPopover("state", "State Help", "States can be selected from the drop down list. Multiple states may be selected.",
"right", trigger = "hover", options = list(container = "body")),
uiOutput('county'),
#                                                                               selectizeInput("county", label=p("Choose a County"), selected = NULL,
#                                                                                              choices = as.character(counties$desc) , multiple = TRUE),
bsPopover("county", "County Help", "Counties for the selected states can be selected from the drop down list. Multiple counties may be selected.",
"right", trigger = "hover", options= list(container = "body")),
#selectizeInput("huc_ID", label=p("HUC"), selected = NULL, choices = NULL, multiple = TRUE ),
textInput("huc_ID", label=p("HUC"), value = "", placeholder = "Enter a huc code (ex. 03020201)"),
bsPopover("huc_ID", "HUC Help",
"A HUC is a federal code used to identify the hydrologic unit of the monitoring location to the cataloging unit level of precision. Full hydrologic unit codes (HUCs) or partial HUCs using trailing wildcards may be entered. Only trailing wildcards are accepted. More than one HUC may be entered, separated by semicolons. The lists and maps of hydrologic units are available from the USGS.",
"top", trigger = "hover", options = list(container = "body"))),
column( 4,
tags$h3(id = "Point", "Point Location", style  = "text-align:center"),
bsPopover(id = "Point", "Point Location Help", "Enter a latitude and longitude and a radial distance to create a search area. Distance should be entered in miles. Latitude and longitude should be entered in decimal degrees relative to the NAD83 datum. Longitudes in the western hemisphere should be preceded with a negative sign (-). Many stations outside the continental US do not have latitude and longitude referenced to WGS84 and therefore cannot be found using these parameters.",
"bottom", trigger = "hover",options= list(container = "body")),
column(6, numericInput("LAT", "Latitude (decimal degrees)", value = 0, min = 0, max = 100)),
column(6, numericInput("LONG", "Longitude (decimal degrees)", value = 0, min = 0, max = 100)),
column(12, numericInput("distance", "Distance from point (miles)", value = 0, min = 0, max = 100))),
column(4,
tags$h3(id = "BBOX", "Bounding Box", style  = "text-align:center"),
bsPopover(id = "BBOX", "Bounding Box Help",
"Enter the North and South latitudes and the East and West longitudes to create a bounding box. Latitude and Longitude should be entered in decimal degrees relative to the NAD83 datum. Longitudes in the western hemisphere should be preceded with a negative sign (-).",
"bottom", trigger = "hover", options = list(container = "body")),
column(6, numericInput("North", "North", value = 0, min = -100, max = 100) ),
column(6, numericInput("South", "South", value = 0, min = -100, max = 100) ),
column(6, numericInput("East", "East", value = 0, min = -100, max = 100) ),
column(6, numericInput("West", "West", value = 0, min = -100, max = 100) )))),
bsCollapsePanel(h3("Sampling Parameters", style  = "text-align:center"),
wellPanel(style = "overflow: auto;",
column(3, h4("Date Range"), h5("(MM-DD-YYYY)"),
dateInput("date_Lo", "From", format = "mm-dd-yyyy", value = ""),
dateInput("date_Hi", "To", format = "mm-dd-yyyy", value = "")
),
column(3,selectizeInput('media',  label = a("Sample Media", target="_blank", href = "https://www.waterqualitydata.us/portal_userguide/#WQPUserGuide-Table2"), multiple = TRUE, choices = '', options = list(
valueField = 'value',
labelField = 'value',
searchField = 'value',
options = list(),
create = FALSE,
load = I("function(query, callback) {
$.ajax({
url: 'https://www.waterqualitydata.us/Codes/samplemedia?mimeType=json',
type: 'GET',
error: function() {
callback(res.codes);
},
success: function(res) {
callback(res.codes);
}
});
}")
)),
bsPopover("media", "Sample Media Help",
"A sample media indicates the environmental medium where a sample was taken.  Click the sample media heading for a list and description of each media.  Sample media can be selected from the drop down list.  Select multiple items by clicking on each desired option.  The selected options will appear in the sample media box.  To remove a selected item, click on it to select it, then click the backspace key.",
"top", trigger = "hover", options = list(container = "body"))),
column(3, selectizeInput('group', 'Characteristic Group', multiple = TRUE, choices = '', selected = NULL, options = list(
valueField = 'value',
labelField = 'value',
searchField = 'value',
options = list(),
create = FALSE,
load = I("function(query, callback) {
$.ajax({
url: 'https://www.waterqualitydata.us/Codes/characteristictype?mimeType=json',
type: 'GET',
error: function() {
callback();
},
success: function(res) {
callback(res.codes);
}
});
}")
)),
bsPopover("group", "Characteristic Group Help",
"To select a characteristic group start typing the group name in the box.  This will generate a drop-down list.  Characteristic groups can be selected from the drop-down list.   Select multiple items by clicking on each desired option.  The selected options will appear in the Characteristic Group box.  To remove a selected item, click on it to select it, then click the backspace key.",
"top", trigger = "hover", options = list(container = "body"))),
column(3, selectizeInput('chars', 'Characteristic', multiple = TRUE, choices = '',  options = list(
valueField = 'value',
labelField = 'value',
searchField = 'value',
options = list(),
create = FALSE,
load = I("function(query, callback) {
if (!query.length) return callback();
$.ajax({
url: 'https://www.waterqualitydata.us/Codes/characteristicname?mimeType=json',
type: 'GET',
error: function() {
callback();
},
success: function(res) {
callback(res.codes);
}
});
}")
)),
bsPopover("chars", "Characteristic Help",
"A characteristic identifies different types of environmental measurements.  These names are derived from the USEPA Substance Registry System (SRS).  To select a characteristic start typing the characteristic name in the box.  This will generate a drop-down list.  Characteristics can be selected from the drop-down list.   Select multiple items by clicking on each desired option.  The selected options will appear in the Characteristic Group box.  To remove a selected item, click on it to select it, then click the backspace key.",
"top", trigger = "hover", options = list(container = "body"))))),
bsCollapsePanel(h3("Site Parameters", style  = "text-align:center"),
wellPanel( style = "overflow: auto;",
div(style = "height:250px;",
column(4, selectizeInput('site_type', label = HTML("<a target = '_new' href = 'https://www.waterqualitydata.us/portal_userguide/#WQPUserGuide-Table1'>Site Type</a>"),
multiple = TRUE, choices = '', options = list(
valueField = 'value',
labelField = 'value',
searchField = 'value',
options = list(),
create = FALSE,
load = I("function(query, callback) {
if (!query.length) return callback();
$.ajax({
url: 'https://www.waterqualitydata.us/Codes/sitetype?mimeType=json',
type: 'GET',
error: function() {
callback();
},
success: function(res) {
callback(res.codes);
}
});
}")
)),
bsPopover("site_type", "Site Type Help",
"A site type is a generalized location in the hydrologic cycle, or a man-made feature thought to affect the hydrologic conditions measured at a site.  To select a site type start typing the name in the box.  This will generate a drop-down list.  Site Types can be selected from the drop-down list.   Select multiple items by clicking on each desired option.  The selected options will appear in the Site Type box.  To remove a selected item, click on it to select it, then click the backspace key.",
"top", trigger = "hover", options = list(container = "body"))),
column(4, selectizeInput('org_id', 'Organization', multiple = TRUE, choices = '', options = list(
valueField = 'value',
labelField = 'desc',
searchField = 'desc',
options = list(),
create = FALSE,
load = I("function(query, callback) {
if (!query.length) return callback();
$.ajax({
url: 'https://www.waterqualitydata.us/Codes/organization?mimeType=json',
type: 'GET',
error: function() {
callback();
},
success: function(res) {
callback(res.codes);
}
});
}")
)),
bsPopover("org_id", "Organization Help",
"A designator used to identify a unique business establishment within a context.  Select from a list of organization IDs represented in the source databases.  Multiple IDs may be selected.",
"top", trigger = "hover", options = list( container = "body"))),
column(4, textInput("site_id", label=p("Site ID")),
bsPopover("site_id", "Site ID Help",
"A site id is a designator used to describe the unique name, number, or code assigned to identify the monitoring location. Site IDs are case-sensitive and should be entered in the following format: AGENCY-STATION NUMBER. More than one site ID may be entered, separated by semicolons. If you are entering an NWIS site, use USGS as the AGENCY.",
"top", trigger = "hover", options = list(container = "body"))))
))))),
fluidRow(
column(5),
column(2,
bsButton("CHECK", "Retrieve Data", style = "primary"),
bsModal("moMod", "WQP Query Processing", trigger = "CHECK",
br(),
fluidRow(
h3(textOutput("REC_txt"),
style  = "text-align:center"),
conditionalPanel("output.Rec_count == 'yes' ",
uiOutput('modal1'),
uiOutput('modal2')
),
bsPopover("modal2", "Please only click once", "Importing data takes time. Please wait for the import complete message to display. Clicking the button more than once will cause the data to download multiple times and will therefore take much longer.",
"top", trigger = "hover", options = list(container = "body")),
conditionalPanel(
condition = "output.data_check == 'yes' & output.Display2 == 'yes' ",
fluidRow(h2("Data Import Complete", style  = "text-align:center; color:green")),
fluidRow(h3("Click close and proceed to the Check Data Tab. ", style  = "text-align:center; color:#204060")
))))
)
)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## Tt Mod, Clear Query Button ####
, br()
,fluidRow(column(5), column(2,bsButton("ClearQuery", label="Clear Query Selections", style="primary")))
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
),fluidRow(br()),
fluidRow(wellPanel(fluidRow(h4("WQP Web Service Query URL", style  = "text-align:center")),
verbatimTextOutput("URL")))
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Tt Mod, Save/Load Buttons ####
# # Tt Button to Save URL parts, use lst.url
# ,fluidRow(br()),
#       fluidRow(wellPanel(fluidRow(h4("URL Parts", style  = "text-align:center")),
#           verbatimTextOutput("lst.URL")))
#,br()
# ,fluidRow(column(1,bsButton("ClearQuery", label="Clear Query Selections", style="primary")
#                  ,bsPopover("ClearQuery", "Clear Query", trigger = "hover", placement="right", options = list(container = "body")
#                             ,"This button clears the user's query selections.")
#                  )
#           )
,br()
,fluidRow(column(1,downloadButton("SaveQuery2","Save Query File")
)
# ,column(1,
#        bsButton("SaveQuery", label="Save Query", style="primary")
#        ,bsPopover("SaveQuery", "Save Query", trigger = "hover", placement="right", options = list(container = "body")
#                   ,"This button saves the query selections for later use."))
,bsPopover("SaveQuery2", "Save Query File", "Click to save the query selections for use later.",
"top", trigger = "hover", options = list(container = "body")
)
)
#,fluidRow(br())
#,fluidRow(br())
,fluidRow(column(8,fileInput("LoadQueryFile","Load Query File",accept=".rds")
)
)
#,fluidRow(br())
,fluidRow(column(1,bsButton("UpdateQuery", label="Update Query From File", style="primary")
,bsPopover("UpdateQuery", "Update Query", trigger = "hover", placement="right", options = list(container = "body")
,"This button updates the query selections from a user selected query file. Must upload file first before clicking this button."))
)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
)}
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
