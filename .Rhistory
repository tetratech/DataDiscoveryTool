column(4,
tags$h3(id = "BBOX", "Bounding Box", style  = "text-align:center"),
bsPopover(id = "BBOX", "Bounding Box Help",
"Enter the North and South latitudes and the East and West longitudes to create a bounding box. Latitude and Longitude should be entered in decimal degrees relative to the NAD83 datum. Longitudes in the western hemisphere should be preceded with a negative sign (-).",
"bottom", trigger = "hover", options = list(container = "body")),
column(6, numericInput("North", "North", value = 0, min = -100, max = 100) ),
column(6, numericInput("South", "South", value = 0, min = -100, max = 100) ),
column(6, numericInput("East", "East", value = 0, min = -100, max = 100) ),
column(6, numericInput("West", "West", value = 0, min = -100, max = 100) )))),
bsCollapsePanel(h3("Sampling Parameters", style  = "text-align:center"),
wellPanel(style = "overflow: auto;",
column(3, h4("Date Range"), h5("(MM-DD-YYYY)"),
dateInput("date_Lo", "From", format = "mm-dd-yyyy", value = ""),
dateInput("date_Hi", "To", format = "mm-dd-yyyy", value = "")
),
column(3,selectizeInput('media',  label = a("Sample Media", target="_blank", href = "https://www.waterqualitydata.us/portal_userguide/#WQPUserGuide-Table2"), multiple = TRUE, choices = '', options = list(
valueField = 'value',
labelField = 'value',
searchField = 'value',
options = list(),
create = FALSE,
load = I("function(query, callback) {
$.ajax({
url: 'https://www.waterqualitydata.us/Codes/samplemedia?mimeType=json',
type: 'GET',
error: function() {
callback(res.codes);
},
success: function(res) {
callback(res.codes);
}
});
}")
)),
bsPopover("media", "Sample Media Help",
"A sample media indicates the environmental medium where a sample was taken.  Click the sample media heading for a list and description of each media.  Sample media can be selected from the drop down list.  Select multiple items by clicking on each desired option.  The selected options will appear in the sample media box.  To remove a selected item, click on it to select it, then click the backspace key.",
"top", trigger = "hover", options = list(container = "body"))),
column(3, selectizeInput('group', 'Characteristic Group', multiple = TRUE, choices = '', selected = NULL, options = list(
valueField = 'value',
labelField = 'value',
searchField = 'value',
options = list(),
create = FALSE,
load = I("function(query, callback) {
$.ajax({
url: 'https://www.waterqualitydata.us/Codes/characteristictype?mimeType=json',
type: 'GET',
error: function() {
callback();
},
success: function(res) {
callback(res.codes);
}
});
}")
)),
bsPopover("group", "Characteristic Group Help",
"To select a characteristic group start typing the group name in the box.  This will generate a drop-down list.  Characteristic groups can be selected from the drop-down list.   Select multiple items by clicking on each desired option.  The selected options will appear in the Characteristic Group box.  To remove a selected item, click on it to select it, then click the backspace key.",
"top", trigger = "hover", options = list(container = "body"))),
column(3, selectizeInput('chars', 'Characteristic', multiple = TRUE, choices = '',  options = list(
valueField = 'value',
labelField = 'value',
searchField = 'value',
options = list(),
create = FALSE,
load = I("function(query, callback) {
if (!query.length) return callback();
$.ajax({
url: 'https://www.waterqualitydata.us/Codes/characteristicname?mimeType=json',
type: 'GET',
error: function() {
callback();
},
success: function(res) {
callback(res.codes);
}
});
}")
)),
bsPopover("chars", "Characteristic Help",
"A characteristic identifies different types of environmental measurements.  These names are derived from the USEPA Substance Registry System (SRS).  To select a characteristic start typing the characteristic name in the box.  This will generate a drop-down list.  Characteristics can be selected from the drop-down list.   Select multiple items by clicking on each desired option.  The selected options will appear in the Characteristic Group box.  To remove a selected item, click on it to select it, then click the backspace key.",
"top", trigger = "hover", options = list(container = "body"))))),
bsCollapsePanel(h3("Site Parameters", style  = "text-align:center"),
wellPanel( style = "overflow: auto;",
div(style = "height:250px;",
column(4, selectizeInput('site_type', label = HTML("<a target = '_new' href = 'https://www.waterqualitydata.us/portal_userguide/#WQPUserGuide-Table1'>Site Type</a>"),
multiple = TRUE, choices = '', options = list(
valueField = 'value',
labelField = 'value',
searchField = 'value',
options = list(),
create = FALSE,
load = I("function(query, callback) {
if (!query.length) return callback();
$.ajax({
url: 'https://www.waterqualitydata.us/Codes/sitetype?mimeType=json',
type: 'GET',
error: function() {
callback();
},
success: function(res) {
callback(res.codes);
}
});
}")
)),
bsPopover("site_type", "Site Type Help",
"A site type is a generalized location in the hydrologic cycle, or a man-made feature thought to affect the hydrologic conditions measured at a site.  To select a site type start typing the name in the box.  This will generate a drop-down list.  Site Types can be selected from the drop-down list.   Select multiple items by clicking on each desired option.  The selected options will appear in the Site Type box.  To remove a selected item, click on it to select it, then click the backspace key.",
"top", trigger = "hover", options = list(container = "body"))),
column(4, selectizeInput('org_id', 'Organization', multiple = TRUE, choices = '', options = list(
valueField = 'value',
labelField = 'desc',
searchField = 'desc',
options = list(),
create = FALSE,
load = I("function(query, callback) {
if (!query.length) return callback();
$.ajax({
url: 'https://www.waterqualitydata.us/Codes/organization?mimeType=json',
type: 'GET',
error: function() {
callback();
},
success: function(res) {
callback(res.codes);
}
});
}")
)),
bsPopover("org_id", "Organization Help",
"A designator used to identify a unique business establishment within a context.  Select from a list of organization IDs represented in the source databases.  Multiple IDs may be selected.",
"top", trigger = "hover", options = list( container = "body"))),
column(4, textInput("site_id", label=p("Site ID")),
bsPopover("site_id", "Site ID Help",
"A site id is a designator used to describe the unique name, number, or code assigned to identify the monitoring location. Site IDs are case-sensitive and should be entered in the following format: AGENCY-STATION NUMBER. More than one site ID may be entered, separated by semicolons. If you are entering an NWIS site, use USGS as the AGENCY.",
"top", trigger = "hover", options = list(container = "body"))))
))))),
fluidRow(
column(5),
column(2,
bsButton("CHECK", "Retrieve Data", style = "primary"),
bsModal("moMod", "WQP Query Processing", trigger = "CHECK",
br(),
fluidRow(
h3(textOutput("REC_txt"),
style  = "text-align:center"),
conditionalPanel("output.Rec_count == 'yes' ",
uiOutput('modal1'),
uiOutput('modal2')
),
bsPopover("modal2", "Please only click once", "Importing data takes time. Please wait for the import complete message to display. Clicking the button more than once will cause the data to download multiple times and will therefore take much longer.",
"top", trigger = "hover", options = list(container = "body")),
conditionalPanel(
condition = "output.data_check == 'yes' & output.Display2 == 'yes' ",
fluidRow(h2("Data Import Complete", style  = "text-align:center; color:green")),
fluidRow(h3("Click close and proceed to the Check Data Tab. ", style  = "text-align:center; color:#204060")
))))
))),fluidRow(br()),
fluidRow(wellPanel(fluidRow(h4("WQP Web Service Query URL", style  = "text-align:center")),
verbatimTextOutput("URL")))
# # Tt Button to Save URL parts, use lst.url
# ,fluidRow(br()),
#       fluidRow(wellPanel(fluidRow(h4("URL Parts", style  = "text-align:center")),
#           verbatimTextOutput("lst.URL")))
,fluidRow(
column(1,
downloadButton("SaveQuery2","Save Query 2"))
,column(1,
bsButton("SaveQuery", label="Save Query", style="primary")
,bsPopover("SaveQuery", "Save Query", trigger = "hover", placement="right", options = list(container = "body")
,"This button saves the query selections for later use."))
)
,fluidRow(br())
,fluidRow(br())
,fluidRow(
column(3,
fileInput("LoadQueryFile","Load Query File",accept=".rds"))
)
#,fluidRow(br())
,fluidRow(column(1,
bsButton("UpdateQuery", label="Update Query From File", style="primary")
,bsPopover("UpdateQuery", "Update Query", trigger = "hover", placement="right", options = list(container = "body")
,"This button updates the query selections from a user selected query file."))
)
)}
runApp()
runApp()
runApp()
runApp()
myDir <- file.path("C:","Users","Erik.Leppo","Downloads")
myFiles <- list.files(path=myDir, pattern=" *.rds")
myFiles
myList <- readRDS(file.path(myDir,myFiles[length(myFiles)]))
myList
runApp()
myDir <- file.path("C:","Users","Erik.Leppo","Downloads")
myFiles <- list.files(path=myDir, pattern=" *.rds")
myFiles
myList <- readRDS(file.path(myDir,myFiles[length(myFiles)]))
myList
ls_query_load$county
myDir <- file.path("C:","Users","Erik.Leppo","Downloads")
myFiles <- list.files(path=myDir, pattern=" *.rds")
myFiles
myList <- readRDS(file.path(myDir,myFiles[length(myFiles)]))
myList
ls_query_load$county
myList$county
runApp()
runApp()
runApp('C:/Users/Erik.Leppo/OneDrive - Tetra Tech, Inc/MyDocs_OneDrive/GitHub/DataDiscoveryTool-master_1.1.0.9001')
shiny::runApp()
runApp()
library(wqGateway)
#ProjRoot          <- 'C:/Users/jon.harcum/OneDrive for Business/Projects/wqpDataDiscovery/work00'
ProjRoot <- "U:/___ddt/wqpDataDiscovery/work00"
setwd(ProjRoot)
toolFolders       <- c('toolDataReview', 'toolBaseSettings')
figFolders        <- c('figures')
# -----< Level 0 -- Data Retrieval >---------------------
# Selection Parameters
siteTypeSel           <- c('Stream')
hucSel                <- c('04010301')
characteristicTypeSel <- c('Nutrient')
# Site and results retrieval
# sites     <- whatWQPsites(huc= hucSel, siteType=siteTypeSel, characteristicType=characteristicTypeSel)
# results   <- readWQPdata(huc= hucSel, siteType=siteTypeSel, characteristicType=characteristicTypeSel)
#save filter with
# -----< Level 1 -- Retrieval Report >---------------------
load('downloadData0.Rdata')
View(states)
View(results)
names(results)
sort(names(results))
runApp('C:/Users/Erik.Leppo/OneDrive - Tetra Tech, Inc/MyDocs_OneDrive/GitHub/DataDiscoveryTool')
shiny::runApp()
ifelse(as.numeric(R.Version()$major)<3,
{writeLines("You are running an old version of R. \nPlease Update to R Version 3.2 or higher. \nThe Quick Start Guide provides step by step instructions to update R.")},{
#ifelse(as.numeric(R.Version()$major)==3 & as.numeric(R.Version()$minor)<2.1,
#{writeLines("You are running an old version of R. \nPlease Update to R Version 3.2.1 or higher. \nThe Quick Start Guide provides step by step instructions to update R.")}, {
# Install packages if needed
if ("dataRetrieval" %in% rownames(installed.packages()) ){
packinfo<-installed.packages(fields = c("Package", "Version"))
if (as.numeric(substr(packinfo["dataRetrieval", "Version"], 1, 3))<2.3){
remove.packages("dataRetrieval")
install.packages("dataRetrieval", repos='http://cran.cnr.Berkeley.edu')
}
}
packageNeeds <- c('shiny', 'shinyBS', 'data.table', 'DT',
'dplyr', 'dataRetrieval', 'devtools', 'httr',
'ggplot2', 'stringr', 'scales')
packageNeeds <- packageNeeds[!packageNeeds %in% rownames(installed.packages())]
if(length(packageNeeds)>0){
install.packages(packageNeeds, repos='http://cran.cnr.Berkeley.edu')
}
devPackages<-c("leaflet", "rCharts")
devPackages <- devPackages[!devPackages %in% rownames(installed.packages())]
if (length(devPackages)>0){
require(devtools)
if ("rCharts" %in% devPackages){
devtools::install_github('ramnathv/rCharts')
}
if("leaflet" %in% devPackages){
devtools::install_github("rstudio/leaflet")
}
}
## run the app
require(shiny)
runApp(launch.browser = T)
})
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
myDir <- file.path("C:","Users","Erik.Leppo","Downloads")
myFiles <- list.files(path=myDir, pattern=" DDT_Data*.rds")
myFiles
myFiles <- list.files(path=myDir, pattern=" *.rds")
myFiles
list.files(path=myDir, pattern="DDT_Data_.rds")
list.files(path=myDir, pattern="DDT_Data*")
list.files(path=myDir, pattern="DDT_Data_ *.rds")
list.files(path=myDir, pattern="DDT_Data_*.rds")
list.files(path=myDir, pattern="DDT_Data_*)
)
list.files(path=myDir, pattern="DDT_Data_*")
list.files(path=myDir, pattern="DDT_Query_*")
myDir <- file.path("C:","Users","Erik.Leppo","Downloads")
myFiles <- list.files(path=myDir, pattern="DDT_Data_*")
myFiles
myList <- readRDS(file.path(myDir,myFiles[length(myFiles)])) # load the last one
# check RDS
myDir <- file.path("C:","Users","Erik.Leppo","Downloads")
myFiles <- list.files(path=myDir, pattern="DDT_Data_*")
myFiles
myData <- readRDS(file.path(myDir,myFiles[length(myFiles)])) # load the last one
str(myData)
View(myData)
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
LoadDataFile
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
myDir <- file.path("C:","Users","Erik.Leppo","Downloads")
myFiles <- list.files(path=myDir, pattern="DDT_Filters_*")
myFiles
myList <- readRDS(file.path(myDir,myFiles[length(myFiles)])) # load the last one
myList
devtools::install_github("leppott/XC95")
library(XC95)
??XC95
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
install.packages("dplyr")
runApp()
shiny::runApp()
runApp()
runApp()
ifelse(as.numeric(R.Version()$major)<3,
{writeLines("You are running an old version of R. \nPlease Update to R Version 3.2 or higher. \nThe Quick Start Guide provides step by step instructions to update R.")},{
#ifelse(as.numeric(R.Version()$major)==3 & as.numeric(R.Version()$minor)<2.1,
#{writeLines("You are running an old version of R. \nPlease Update to R Version 3.2.1 or higher. \nThe Quick Start Guide provides step by step instructions to update R.")}, {
# Install packages if needed
if ("dataRetrieval" %in% rownames(installed.packages()) ){
packinfo<-installed.packages(fields = c("Package", "Version"))
if (as.numeric(substr(packinfo["dataRetrieval", "Version"], 1, 3))<2.3){
remove.packages("dataRetrieval")
install.packages("dataRetrieval", repos='http://cran.cnr.Berkeley.edu')
}
}
packageNeeds <- c('shiny', 'shinyBS', 'data.table', 'DT',
'dplyr', 'dataRetrieval', 'devtools', 'httr',
'ggplot2', 'stringr', 'scales')
packageNeeds <- packageNeeds[!packageNeeds %in% rownames(installed.packages())]
if(length(packageNeeds)>0){
install.packages(packageNeeds, repos='http://cran.cnr.Berkeley.edu')
}
devPackages<-c("leaflet", "rCharts")
devPackages <- devPackages[!devPackages %in% rownames(installed.packages())]
if (length(devPackages)>0){
require(devtools)
if ("rCharts" %in% devPackages){
devtools::install_github('ramnathv/rCharts')
}
if("leaflet" %in% devPackages){
devtools::install_github("rstudio/leaflet")
}
}
## run the app
require(shiny)
runApp(launch.browser = T)
})
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
character(0)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
exists(lst_filters_save)
exists("lst_filters_save")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
rawSampleURL <- constructWQPURL('USGS-01594440','01075', '', '')
rawSample <- importWQP(rawSampleURL)
rawSampleURL_Zip <- constructWQPURL('USGS-01594440','01075', '', '', TRUE)
rawSample2 <- importWQP(rawSampleURL_Zip, zip=TRUE)
STORETex <- constructWQPURL('WIDNR_WQX-10032762','Specific conductance', '', '')
STORETdata <- importWQP(STORETex)
str(STORETdata)
x2 <- readWQPdata(STORETex)
library(dataRetrieval)
datarequest_import <- constructWQPURL('USGS-01594440','01075', '', '')
data_read <-
data_import <- importWQP(datarequest_import)
data_import <- importWQP(datarequest_import)
data_import <- importWQP(datarequest_import)
str(data_import)
datarequest_read <- c(siteid="USGS-01594440", USGSPCode="01075" )
?readWQPdata
data_read <- readWQPdata(datarequest_read)
x<- readWQPdata(siteid="USGS-0159440")
x<- readWQPdata(siteid="USGS-01594440")
str(x)
names(data_import)
unique(data_read$CharacteristicName)
y <- readWQPdata(siteid="USGS-01594440", Characteristicname="Silver")
dim(y)
dim(data_import)
a <- "https://www.waterqualitydata.us/Result/search?statecode=US%3A55&siteType=Stream&huc=04010301&sampleMedia=Water&characteristicType=Nutrient&startDateLo=01-01-2000&startDateHi=12-31-2015&mimeType=tsv&sorted=no"
b <- importWQP(a)
head(b)
str(data_import)
?readWQPdata
datarequest_read <- c(siteid="USGS-01594440", USGSPCode="01075")
data_read <- readWQPdata(datarequest_read)    # takes longer
str(data_import)
shiny::runApp()
headers(HEAD("http://google.com"))
HEAD("http://google.com")
x <- "https://www.waterqualitydata.us/Result/search?statecode=US%3A55&siteType=Stream&huc=04010301&sampleMedia=Water&characteristicType=Nutrient&startDateLo=01-01-2000&startDateHi=12-31-2015&mimeType=tsv&sorted=no"
HEAD(x)
headers(HEAD(x))
# define URL
myURL <- "https://www.waterqualitydata.us/Result/search?statecode=US%3A55&siteType=Stream&huc=04010301&sampleMedia=Water&characteristicType=Nutrient&startDateLo=01-01-2000&startDateHi=12-31-2015&mimeType=tsv&sorted=no"
# show HEAD
HEAD(myURL)
# show headers
headers(HEAD(myURL))
library(dataRetrieval)
# "import" uses a URL
datarequest_import <- constructWQPURL('USGS-01594440','01075', '', '')
# siteNumbers, parameterCd, startDate, endDate, zip=FALSE
data_import <- importWQP(datarequest_import)  # r
str(data_import)
View(data_import)
runApp()
runApp()
