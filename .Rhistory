tags$h3(id = "BBOX", "Bounding Box", style  = "text-align:center"),
bsPopover(id = "BBOX", "Bounding Box Help",
"Enter the North and South latitudes and the East and West longitudes to create a bounding box. Latitude and Longitude should be entered in decimal degrees relative to the NAD83 datum. Longitudes in the western hemisphere should be preceded with a negative sign (-).",
"bottom", trigger = "hover", options = list(container = "body")),
column(6, numericInput("North", "North", value = 0, min = -100, max = 100) ),
column(6, numericInput("South", "South", value = 0, min = -100, max = 100) ),
column(6, numericInput("East", "East", value = 0, min = -100, max = 100) ),
column(6, numericInput("West", "West", value = 0, min = -100, max = 100) )))),
bsCollapsePanel(h3("Sampling Parameters", style  = "text-align:center"),
wellPanel(style = "overflow: auto;",
column(3, h4("Date Range"), h5("(MM-DD-YYYY)"),
dateInput("date_Lo", "From", format = "mm-dd-yyyy", value = ""),
dateInput("date_Hi", "To", format = "mm-dd-yyyy", value = "")
),
column(3,selectizeInput('media',  label = a("Sample Media", target="_blank", href = "https://www.waterqualitydata.us/portal_userguide/#WQPUserGuide-Table2"), multiple = TRUE, choices = '', options = list(
valueField = 'value',
labelField = 'value',
searchField = 'value',
options = list(),
create = FALSE,
load = I("function(query, callback) {
$.ajax({
url: 'https://www.waterqualitydata.us/Codes/samplemedia?mimeType=json',
type: 'GET',
error: function() {
callback(res.codes);
},
success: function(res) {
callback(res.codes);
}
});
}")
)),
bsPopover("media", "Sample Media Help",
"A sample media indicates the environmental medium where a sample was taken.  Click the sample media heading for a list and description of each media.  Sample media can be selected from the drop down list.  Select multiple items by clicking on each desired option.  The selected options will appear in the sample media box.  To remove a selected item, click on it to select it, then click the backspace key.",
"top", trigger = "hover", options = list(container = "body"))),
column(3, selectizeInput('group', 'Characteristic Group', multiple = TRUE, choices = '', selected = NULL, options = list(
valueField = 'value',
labelField = 'value',
searchField = 'value',
options = list(),
create = FALSE,
load = I("function(query, callback) {
$.ajax({
url: 'https://www.waterqualitydata.us/Codes/characteristictype?mimeType=json',
type: 'GET',
error: function() {
callback();
},
success: function(res) {
callback(res.codes);
}
});
}")
)),
bsPopover("group", "Characteristic Group Help",
"To select a characteristic group start typing the group name in the box.  This will generate a drop-down list.  Characteristic groups can be selected from the drop-down list.   Select multiple items by clicking on each desired option.  The selected options will appear in the Characteristic Group box.  To remove a selected item, click on it to select it, then click the backspace key.",
"top", trigger = "hover", options = list(container = "body"))),
column(3, selectizeInput('chars', 'Characteristic', multiple = TRUE, choices = '',  options = list(
valueField = 'value',
labelField = 'value',
searchField = 'value',
options = list(),
create = FALSE,
load = I("function(query, callback) {
if (!query.length) return callback();
$.ajax({
url: 'https://www.waterqualitydata.us/Codes/characteristicname?mimeType=json',
type: 'GET',
error: function() {
callback();
},
success: function(res) {
callback(res.codes);
}
});
}")
)),
bsPopover("chars", "Characteristic Help",
"A characteristic identifies different types of environmental measurements.  These names are derived from the USEPA Substance Registry System (SRS).  To select a characteristic start typing the characteristic name in the box.  This will generate a drop-down list.  Characteristics can be selected from the drop-down list.   Select multiple items by clicking on each desired option.  The selected options will appear in the Characteristic Group box.  To remove a selected item, click on it to select it, then click the backspace key.",
"top", trigger = "hover", options = list(container = "body"))))),
bsCollapsePanel(h3("Site Parameters", style  = "text-align:center"),
wellPanel( style = "overflow: auto;",
div(style = "height:250px;",
column(4, selectizeInput('site_type', label = HTML("<a target = '_new' href = 'https://www.waterqualitydata.us/portal_userguide/#WQPUserGuide-Table1'>Site Type</a>"),
multiple = TRUE, choices = '', options = list(
valueField = 'value',
labelField = 'value',
searchField = 'value',
options = list(),
create = FALSE,
load = I("function(query, callback) {
if (!query.length) return callback();
$.ajax({
url: 'https://www.waterqualitydata.us/Codes/sitetype?mimeType=json',
type: 'GET',
error: function() {
callback();
},
success: function(res) {
callback(res.codes);
}
});
}")
)),
bsPopover("site_type", "Site Type Help",
"A site type is a generalized location in the hydrologic cycle, or a man-made feature thought to affect the hydrologic conditions measured at a site.  To select a site type start typing the name in the box.  This will generate a drop-down list.  Site Types can be selected from the drop-down list.   Select multiple items by clicking on each desired option.  The selected options will appear in the Site Type box.  To remove a selected item, click on it to select it, then click the backspace key.",
"top", trigger = "hover", options = list(container = "body"))),
column(4, selectizeInput('org_id', 'Organization', multiple = TRUE, choices = '', options = list(
valueField = 'value',
labelField = 'desc',
searchField = 'desc',
options = list(),
create = FALSE,
load = I("function(query, callback) {
if (!query.length) return callback();
$.ajax({
url: 'https://www.waterqualitydata.us/Codes/organization?mimeType=json',
type: 'GET',
error: function() {
callback();
},
success: function(res) {
callback(res.codes);
}
});
}")
)),
bsPopover("org_id", "Organization Help",
"A designator used to identify a unique business establishment within a context.  Select from a list of organization IDs represented in the source databases.  Multiple IDs may be selected.",
"top", trigger = "hover", options = list( container = "body"))),
column(4, textInput("site_id", label=p("Site ID")),
bsPopover("site_id", "Site ID Help",
"A site id is a designator used to describe the unique name, number, or code assigned to identify the monitoring location. Site IDs are case-sensitive and should be entered in the following format: AGENCY-STATION NUMBER. More than one site ID may be entered, separated by semicolons. If you are entering an NWIS site, use USGS as the AGENCY.",
"top", trigger = "hover", options = list(container = "body"))))
))))),
fluidRow(
column(5),
column(2,
bsButton("CHECK", "Retrieve Data", style = "primary"),
bsModal("moMod", "WQP Query Processing", trigger = "CHECK",
br(),
fluidRow(
h3(textOutput("REC_txt"),
style  = "text-align:center"),
conditionalPanel("output.Rec_count == 'yes' ",
uiOutput('modal1'),
uiOutput('modal2')
),
bsPopover("modal2", "Please only click once", "Importing data takes time. Please wait for the import complete message to display. Clicking the button more than once will cause the data to download multiple times and will therefore take much longer.",
"top", trigger = "hover", options = list(container = "body")),
conditionalPanel(
condition = "output.data_check == 'yes' & output.Display2 == 'yes' ",
fluidRow(h2("Data Import Complete", style  = "text-align:center; color:green")),
fluidRow(h3("Click close and proceed to the Check Data Tab. ", style  = "text-align:center; color:#204060")
))))
))),fluidRow(br()),
fluidRow(wellPanel(fluidRow(h4("WQP Web Service Query URL", style  = "text-align:center")),
verbatimTextOutput("URL")))
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Tt Mod, Save/Load Buttons ####
# # Tt Button to Save URL parts, use lst.url
# ,fluidRow(br()),
#       fluidRow(wellPanel(fluidRow(h4("URL Parts", style  = "text-align:center")),
#           verbatimTextOutput("lst.URL")))
,br()
,fluidRow(column(1,downloadButton("SaveQuery2","Save Query File")
)
# ,column(1,
#        bsButton("SaveQuery", label="Save Query", style="primary")
#        ,bsPopover("SaveQuery", "Save Query", trigger = "hover", placement="right", options = list(container = "body")
#                   ,"This button saves the query selections for later use."))
,bsPopover("SaveQuery2", "Save Query File", "Click to save the query selections for use later.",
"top", trigger = "hover", options = list(container = "body")
)
)
#,fluidRow(br())
,fluidRow(br())
,fluidRow(column(8,fileInput("LoadQueryFile","Load Query File",accept=".rds")
)
)
#,fluidRow(br())
,fluidRow(column(1,bsButton("UpdateQuery", label="Update Query From File", style="primary")
,bsPopover("UpdateQuery", "Update Query", trigger = "hover", placement="right", options = list(container = "body")
,"This button updates the query selections from a user selected query file. Must upload file first before clicking this button."))
)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
)}
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
?write.csv
shiny::runApp()
runApp()
?data.frame
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
myDir <- file.path("C:","Users","Erik.Leppo","OneDrive - Tetra Tech, Inc"
,"MyDocs_OneDrive", "GitHub", "DataDiscoveryTool", "external")
myFile <- "Counties.csv"
#
counties <- read.
counties <- read.csv(file.path(myDir,myFile),header=FALSE)
head(counties)
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(XC95)
taxon.response()
taxon.response
?taxon.response
runApp()
return(getWQPData_app(url)
)
runApp()
url
library(dataRetrieval)
retval <- importWQP(urlCall,FALSE, tz="")
urlCall <- url
retval <- importWQP(urlCall,FALSE, tz="")
a <-  "https://www.waterqualitydata.us/Result/search?statecode=US%3A55&siteType=Stream&huc=04010301&sampleMedia=Water&characteristicType=Nutrient&startDateLo=01-01-2000&startDateHi=12-31-2015&mimeType=tsv&sorted=no"
urlCall <- a
retval <- importWQP(urlCall,FALSE, tz="")
urlStation <- gsub("/Result/", "/Station/", urlCall)
!all(is.na(retval))
siteInfo <- importWQP(urlStation, FALSE, tz="")
siteInfoCommon <- data.frame(station_nm=siteInfo$MonitoringLocationName,
agency_cd=siteInfo$OrganizationIdentifier,
site_no=siteInfo$MonitoringLocationIdentifier,
dec_lat_va=siteInfo$LatitudeMeasure,
dec_lon_va=siteInfo$LongitudeMeasure,
hucCd=siteInfo$HUCEightDigitCode,
stringsAsFactors=FALSE)
siteInfo <- cbind(siteInfoCommon, siteInfo)
retvalVariableInfo <- retval[,c("CharacteristicName","USGSPCode",
"ResultMeasure.MeasureUnitCode","ResultSampleFractionText")]
retvalVariableInfo <- unique(retvalVariableInfo)
variableInfo <- data.frame(characteristicName=retval$CharacteristicName,
parameterCd=retval$USGSPCode,
param_units=retval$ResultMeasure.MeasureUnitCode,
valueType=retval$ResultSampleFractionText,
stringsAsFactors=FALSE)
if(any(!is.na(variableInfo$parameterCd))){
pcodes <- unique(variableInfo$parameterCd[!is.na(variableInfo$parameterCd)])
pcodes <- pcodes["" != pcodes]
paramINFO <- readNWISpCode(pcodes)
names(paramINFO)["parameter_cd" == names(paramINFO)] <- "parameterCd"
pCodeToName <- pCodeToName
varExtras <- pCodeToName[pCodeToName$parm_cd %in% unique(variableInfo$parameterCd[!is.na(variableInfo$parameterCd)]),]
names(varExtras)[names(varExtras) == "parm_cd"] <- "parameterCd"
variableInfo <- merge(variableInfo, varExtras, by="parameterCd", all = TRUE)
variableInfo <- merge(variableInfo, paramINFO, by="parameterCd", all = TRUE)
variableInfo <- unique(variableInfo)
}
attr(retval, "siteInfo") <- siteInfo
attr(retval, "variableInfo") <- variableInfo
attr(retval, "url") <- urlCall
attr(retval, "queryTime") <- Sys.time()
names(retval)
retval$ResultLower     <- NA
retval$ResultUpper     <- NA
retval$ResultLower     <- 0 * retval$DetectionQuantitationLimitMeasure.MeasureValue
retval$ResultUpper     <- retval$DetectionQuantitationLimitMeasure.MeasureValue
# Add Field - siteInfo - StateName
siteInfo[,"FIPS"] <- paste0(siteInfo[,"CountryCode"],":",siteInfo[,"StateCode"])
siteInfo <- merge(siteInfo, states, by="FIPS", all.x=TRUE)
colnames(siteInfo)[colnames(siteInfo)=="desc"] <- "StateName"
# Add Field - siteInfo - huc8name
myHUCinfo <- data.frame(HUCEightDigitCode=hucs$HUC8
, huc8name=hucs$NAME)
siteInfo <- merge(siteInfo, myHUCinfo, by="HUCEightDigitCode", all.x=TRUE)
rm(myHUCinfo)
# Add Field - siteInfo - CountyName
myCountyInfo <- read.csv("external/Counties.csv", header=FALSE
,colClasses=c("factor","integer","character","factor","factor"))[,2:4]
names(myCountyInfo) <- c("StateCode","CountyCode","CountyName")
siteInfo <- merge(siteInfo, myCountyInfo
, by = c("StateCode","CountyCode")
, all.x = TRUE)
MoreFlds
retval$ResultLower     <- 0 * retval$DetectionQuantitationLimitMeasure.MeasureValue
retval$ResultUpper     <- retval$DetectionQuantitationLimitMeasure.MeasureValue
## more fields from stations file
MoreFlds <- c("OrganizationIdentifier", "MonitoringLocationIdentifier"
, "MonitoringLocationName", "LatitudeMeasure", "LongitudeMeasure"
, "HUCEightDigitCode"
, "huc8name"
, "StateName"
, "CountyName"
, "MonitoringLocationTypeName")
MoreFlds %in% names(siteInfo)
c("OrganizationIdentifier", "MonitoringLocationIdentifier") %in% names(siteInfo)
c("OrganizationIdentifier", "MonitoringLocationIdentifier") %in% names(retval)
retval.merge <- merge(retval,siteInfo[,MoreFlds]
, by.x=c("OrganizationIdentifier", "MonitoringLocationIdentifier")
, by.y=c("OrganizationIdentifier", "MonitoringLocationIdentifier")
, all.x=TRUE)
retval.merge <- merge(retval,siteInfo[,MoreFlds]
, by.x=c("OrganizationIdentifier", "MonitoringLocationIdentifier")
, by.y=c("OrganizationIdentifier", "MonitoringLocationIdentifier")
, all.x=TRUE, sort=FALSE)
ncol(retval) + ncol(siteInfo[,MoreFlds]) - 2 == ncol(retval.merge)
retval <- retval.merge
rm(retval.merge)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
myDateTime <- format(Sys.time(),"%Y%m%d_%H%M%S")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
}
names(data2)
data2[,"LatitudeMeasure"]           <- data2[,"Latitude"]
data2[,"MonitoringLocationIdentifier"] <- data2[,"Station"]
data2[,"OrganizationIdentifier"]       <- data2[,"Organization"]
data2[,"CharacteristicName"]           <- data2[,"Characteristic"]
data2[,"ResultMeasureValue"]           <- data2[,"Result"]
data2[,"ResultMeasure.MeasureUnitCode"]           <- data2[,"Unit"]
data2[,"ResultAnalyticalMethod.MethodIdentifier"] <- data2[,"Method_ID"]
data2[,"ResultAnalyticalMethod.MethodName"]       <- data2[,"Method"]
myDateTime <- format(Sys.time(),"%Y%m%d_%H%M%S")
#
myFile <- file.path("C:","Users","Erik.Leppo","Downloads",paste0("DDT_Data_data2_",myDateTime))
saveRDS(data2,paste0(myFile,".rds"))
write.csv(data2,paste0(myFile,".csv"))
runApp()
shiny::runApp()
?updateSelectizeInput
?updateTextInput
runApp()
runApp()
runApp()
updateSelectizeInput(session, "media", choices=NULL, selected=NULL)
updateSelectizeInput(session, "state", choices=as.character(states$desc), selected=lst_query_load$state) #c("WISCONSIN","ILLINOIS")) #spelled out all CAPS
runApp()
myDir <- file.path("C:","Users","Erik.Leppo","Downloads")
myFiles <- list.files(path=myDir, pattern="DDT_Query_*")
myFiles
myList <- readRDS(file.path(myDir,myFiles[length(myFiles)])) # load the last one
myList <- readRDS(file.path(myDir,myFiles[2]))
myList
myFiles <- list.files(path=myDir, pattern="DDT_Query_*")
myFiles
myList <- readRDS(file.path(myDir,myFiles[length(myFiles)]))
myList
## Only run examples in interactive R sessions
if (interactive()) {
ui <- fluidPage(
p("The checkbox group controls the select input"),
checkboxGroupInput("inCheckboxGroup", "Input checkbox",
c("Item A", "Item B", "Item C")),
selectInput("inSelect", "Select input",
c("Item A", "Item B", "Item C"))
)
server <- function(input, output, session) {
observe({
x <- input$inCheckboxGroup
# Can use character(0) to remove all choices
if (is.null(x))
x <- character(0)
# Can also set the label and select items
updateSelectInput(session, "inSelect",
label = paste("Select input label", length(x)),
choices = x,
selected = tail(x, 1)
)
})
}
shinyApp(ui, server)
}
library(shiny)
## Only run examples in interactive R sessions
if (interactive()) {
ui <- fluidPage(
p("The checkbox group controls the select input"),
checkboxGroupInput("inCheckboxGroup", "Input checkbox",
c("Item A", "Item B", "Item C")),
selectInput("inSelect", "Select input",
c("Item A", "Item B", "Item C"))
)
server <- function(input, output, session) {
observe({
x <- input$inCheckboxGroup
# Can use character(0) to remove all choices
if (is.null(x))
x <- character(0)
# Can also set the label and select items
updateSelectInput(session, "inSelect",
label = paste("Select input label", length(x)),
choices = x,
selected = tail(x, 1)
)
})
}
shinyApp(ui, server)
}
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
?I
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
myDir <- file.path("C:","Users","Erik.Leppo","Downloads")
myFiles <- list.files(path=myDir, pattern="DDT_Query_*")
myFiles
myList <- readRDS(file.path(myDir,myFiles[2]))
myList
myDir <- file.path("C:","Users","Erik.Leppo","Downloads")
myFiles <- list.files(path=myDir, pattern="DDT_Data_*")
myFiles
myData <- readRDS(file.path(myDir,myFiles[1]))
?Sys.getenv
Sys.getenv
Sys.getenv()
globalenv()
globalVariables()
ls(globalenv())
?saveRDS
strFile <- paste0("DDT_IMAGE_",format(Sys.time(),"%Y%m%d_%H%M%S"),".rda")
save.image(file=strFile)]
save.image(file=strFile)
getwd()
getwd()
myDir <- file.path("C:","Users","Erik.Leppo","Downloads")
myDir <- file.path("C:","Users","Erik.Leppo","Downloads")
myFiles <- list.files(path=myDir, pattern="DDT_IMAGE_*")
myFiles
myData <- readRDS(file.path(myDir,myFiles[length(myFiles)]))
myData <- load(file.path(myDir,myFiles[length(myFiles)]))
?save.image
myDir <- file.path("C:","Users","Erik.Leppo","Downloads")
myFiles <- list.files(path=myDir, pattern="DDT_Query_*")
myFiles
myList <- readRDS(file.path(myDir,myFiles[13]))
myList
