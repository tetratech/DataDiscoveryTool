# }
#   #data_QAQC <- XLConnect::readWorksheetFromFile("external/DDT_QAQC_Default.xlsx", sheet="Methods Table", startRow=6, header=TRUE)
#   #
# data_QAQC <- read_data_QAQC(strFile="external/DDT_QAQC_Default.xlsx", strSheet = "Methods Table", intStartRow=6)
#
#data_QAQC <- XLConnect::readWorksheetFromFile("external/DDT_QAQC_Default.xlsx"
, sheet="Methods Table", startRow=6, header=TRUE)
library(shiny)
library(DT)
library(XLConnect)
source("external/dataQAQC.R", local=TRUE)
shinyApp(
ui = fluidPage(
DT::dataTableOutput('dt_QAQC')
),
server = function(input, output, session) {
# read_data_QAQC <- function(strFile, strSheet, intStartRow) {
#             XLConnect::readWorksheetFromFile(strFile
#                                              , sheet=strSheet
#                                              , startRow=intStartRow
#                                              , header=TRUE) #, drop=c(1,2))
# }
#   #data_QAQC <- XLConnect::readWorksheetFromFile("external/DDT_QAQC_Default.xlsx", sheet="Methods Table", startRow=6, header=TRUE)
#   #
# data_QAQC <- read_data_QAQC(strFile="external/DDT_QAQC_Default.xlsx", strSheet = "Methods Table", intStartRow=6)
#
#data_QAQC <- XLConnect::readWorksheetFromFile("external/DDT_QAQC_Default.xlsx"
#                                          , sheet="Methods Table", startRow=6, header=TRUE)
ApplyQAQC.column <- 8
data_QAQC_caption <- "Double-click to edit a cell in column Apply.QAQC (highlighted in green [TRUE] or red
[FALSE]).  Edits are only allowed in this column and only for the values TRUE and FALSE."
output$dt_QAQC = DT::renderDataTable(DT::datatable(data_QAQC
, caption=data_QAQC_caption
, rownames=FALSE
, selection='none'
# , server=TRUE
) %>% formatStyle(columns=ApplyQAQC.column
,target="cell"
,background=styleEqual(c(1,0)
,c('lightgreen','red'))
,fontWeight='bold')
)
#outputOptions(output, 'dt_QAQC', suspendWhenHidden=TRUE)
proxy_dt_QAQC <- DT::dataTableProxy('dt_QAQC')
observeEvent(input$dt_QAQC_cell_edit, {
info = input$dt_QAQC_cell_edit
str(info)
i = info$row
j = info$col + 1
v = info$value
# Change Value "v" only IF column = 8 AND logical (T/F)
if(j==8 & (toupper(v)=="FALSE" | toupper(v)=="TRUE")) {
data_QAQC[i, j] <<- DT:::coerceValue(toupper(v), data_QAQC[i, j])
replaceData(proxy_dt_QAQC, data_QAQC, resetPaging = FALSE, rownames = FALSE)
}
#need to update actual table (might be done with above statement)
})
}
)
runApp()
runApp()
shiny::runApp()
?table
myFields[-6]
table(myData[,myFields[-6]],myData[,myFields[6]])
head(mtcars)
myDir <- file.path("C:","Users","Erik.Leppo","Downloads")
myFiles <- list.files(path=myDir, pattern="DDT_Data_*")
myFiles
myData   <- readRDS(file.path(myDir,myFiles[5]))
# 1. get all combos, include number and min/max
myFields <- c("ActivityMediaName", "CharacteristicName", "ResultSampleFractionText"
, "USGSPCode", "Unit", "Result")
myData4QAQC <- myData[,myFields]
myData.QAQC <- unique(myData4QAQC[,-6])
library(dplyr)
myData4QAQC %>%
group_by(ActivityMediaName) %>% #, CharacteristicName, ResultSampleFractionText, USGSPCode)) %>%
summarise(min=min(Result),max=max(Result),n=n())
myData4QAQC %>%
group_by(ActivityMediaName) %>% #, CharacteristicName, ResultSampleFractionText, USGSPCode)) %>%
summarise(min=min(Result,na.rm),max=max(Result,na.rm),n=n())
myData4QAQC %>%
group_by(c(ActivityMediaName, CharacteristicName)) %>% #, CharacteristicName, ResultSampleFractionText, USGSPCode)) %>%
summarise(min=min(Result),max=max(Result),n=n())
myData4QAQC %>%
group_by(c(ActivityMediaName, ResultSampleFractionText)) %>% #, CharacteristicName, ResultSampleFractionText, USGSPCode)) %>%
summarise(min=min(Result),max=max(Result),n=n())
myData4QAQC %>%
group_by(ActivityMediaName, ResultSampleFractionText) %>% #, CharacteristicName, ResultSampleFractionText, USGSPCode)) %>%
summarise(min=min(Result),max=max(Result),n=n())
myData4QAQC %>%
group_by(ActivityMediaName, CharacteristicName, ResultSampleFractionText, USGSPCode, Unit) %>%
summarise(min=min(Result),max=max(Result),n=n())
myData.QAQC.Summary <- myData4QAQC %>%
group_by(ActivityMediaName, CharacteristicName, ResultSampleFractionText, USGSPCode, Unit) %>%
summarise(min=min(Result),max=max(Result),n=n())
View(myData.QAQC.Summary)
myData.QAQC.Summary <- myData4QAQC %>%
group_by(ActivityMediaName, CharacteristicName, ResultSampleFractionText, USGSPCode, Unit) %>%
summarise(n=n(),min=min(Result),max=max(Result))
View(myData.QAQC.Summary)
?max
myData.QAQC.Summary <- myData4QAQC %>%
group_by(ActivityMediaName, CharacteristicName, ResultSampleFractionText, USGSPCode, Unit) %>%
summarise(n=n(),min=min(Result,na.rm=TRUE),max=max(Result,na.rm=TRUE))
View(myData.QAQC.Summary)
runApp()
runApp()
runApp()
names(all_data())
myFields
myFields %in% names(all_data())
myData4QAQC <- myData[,myFields]
myData.QAQC.Summary <- myData4QAQC %>%
group_by(ActivityMediaName, CharacteristicName, ResultSampleFractionText, USGSPCode, Unit) %>%
summarise(n=n(),min=min(Result,na.rm=TRUE),max=max(Result,na.rm=TRUE))
View(myData.QAQC.Summary)
?merge
runApp()
x <- merge(myData.QAQC.Summary, dt_QAQC()[c(myFields, "Apply.QAQC")], by=myFields, all.x=TRUE)
x <- merge(myData.QAQC.Summary, dt_QAQC[c(myFields, "Apply.QAQC")], by=myFields, all.x=TRUE)
x <- merge(myData.QAQC.Summary, data_QAQC[c(myFields, "Apply.QAQC")], by=myFields, all.x=TRUE)
head(data_QAQC)
head(data_QAQC())
dim('dt_QAQC')
str('dt_QAQC')
str(dt_QAQC)
str(input$dt_QAQC)
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
q <- input$LoadDataFile
# Error check
if(is.null(q)) return(NULL)
# define list
data_load <- readRDS(q$datapath)
all_data <- data_load
dim(all_data)
dim(data_load)
data_load <- readRDS(q$datapath)
dim(data_load)
?readRDS
q$datapath
q
q$name
str(q)
str(all_data)
View(data.frame(all_data()))
runApp()
runApp()
is.null(input$LoadDataFile)
q <- input$LoadDataFile
# Error check
if(is.null(q)) return(NULL)
# define list
data_load <- readRDS(q$datapath)
data.frame(data_load)
runApp()
runApp()
data <- all_data()
metadate <- data.table(x = "Date:", y = paste(Sys.time()))
runApp()
metadate
metadate <- data.table(x = "Date:", y = paste(Sys.time()))
metadate
metadata <- data.table(x = "Dataset:", y = "All data")
metaurl <- data.table(x = "URL:", y = url_display())
metanondet <- data.table(x = "Method for non-detects:", y = non_detect_method())
metaorg <- data.table(x = "Number of organizations:", y = length(unique(data$Organization)))
metastat <- data.table(x = "Number of stations:", y = length(unique(data$Station)))
metaparam <- data.table(x = 'Number of characteristics:', y = length(unique(data$Characteristic)))
metarec <- data.table(x = "Number of records:", y = nrow(data))
metabr <- data.table(x = "", y = "")
metabr2 <- data.table(x = "---------------------------------------", y = "")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
data_load <- read.delim(q$datapath, row.names=FALSE, skip=10)
data_load <- read.table(q$datapath, skip=10)
q$datapath
q <- input$LoadDataFile
myDir <- file.path("C:","Users","Erik.Leppo","Downloads")
myDir <- file.path("C:","Users","Erik.Leppo","Downloads")
myFiles <- list.files(path=myDir, pattern=" *.tsv")
myFiles
myData   <- read.delim(file.path(myDir,myFiles[1]))
View(myData)
myData   <- read.delim(file.path(myDir,myFiles[1]),skip=10)
View(myData)
dim(myData)
myData.URL <- read.delim(file.path(myDir,myFiles[1]),skip=2,nrows=1)
myData.URL
myData4URL[1,2]
myData4URL <- read.delim(file.path(myDir,myFiles[1]),skip=2,nrows=1)
myData.URL <- myData4URL[1,2]
myData.URL
myData4URL <- read.delim(file.path(myDir,myFiles[1]),skip=2,nrows=1, col.names=FALSE)
myData4URL
myData.Meta <- read.delim(file.path(myDir,myFiles[1]),nrows=9, col.names=FALSE)
View(myData.Meta)
# read only some lines
myData.Meta <- read.delim(file.path(myDir,myFiles[1]),nrows=9, col.names=FALSE
, col.names=c("Meta.Field","Meta.Value"))
myData.Meta <- read.delim(file.path(myDir,myFiles[1]),nrows=9,
, col.names=c("Meta.Field","Meta.Value"))
View(myData.Meta)
myData.Meta <- read.delim(file.path(myDir,myFiles[1]),nrows=9, header=FALSE
, col.names=c("Meta.Field","Meta.Value"))
View(myData.Meta)
myData.URL <- myData.Meta[3,2]
myData.URL
droplevels(myData.Meta)
myData.Meta <- read.delim(file.path(myDir,myFiles[1]),nrows=9, header=FALSE
, col.names=c("Meta.Field","Meta.Value"))
myData.Meta <- droplevels(myData.Meta)
myData.URL <- myData.Meta[3,2]
myData.URL
myData.URL <- droplevels(myData.Meta[3,2])
myData.URL
str(myData.Meta)
myData.URL <- factor(droplevels(myData.Meta[3,2]))
myData.URL
?as.character
myData.URL <- as.character(factor(droplevels(myData.Meta[3,2])))
myData.URL
myData.URL <- as.character(myData.Meta[3,2])
myData.URL
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
tabPanel("Check Data",
#            wellPanel(fluidRow(column(1),
#                               column(5,
#                       h3("Data Summary", style = "text-align:center"),
#                       fluidRow(uiOutput('check1'))),
#                       column(1),
#                       column(5,
#                       fluidRow(radioButtons("ND_method", "Select method for Non-Detects",
#                                             c("Ignore Non-Detections - remove from data set"=1,
#                                               "Set Non-Detections equal to zero"=2,
#                                               "Set Non-Detections equal to the Limit of Detection"=3,
#                                               "Set Non-Detections equal to the 1/2 times the Limit of Detection"=4)))))),
tabsetPanel(type = "tabs",
tabPanel("Home",
wellPanel(fluidRow(column(1),
column(10,
h3("Data Summary", style = "text-align:center"),
fluidRow(uiOutput('check1'))),
column(1)),
fluidRow(column(1),
column(10, uiOutput('home_date'))),
fluidRow(column(12, h5("Web Query:", style = "text-align: center"))),
fluidRow(column(12, uiOutput('home_query')))),
wellPanel(fluidRow(column(1),
column(10,
fluidRow(h3(" Please select a method to deal with Non-Detections", style = "text-align: center")),
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## Tt Mod, Non Detect Options ####
fluidRow(radioButtons("ND_method", " ",
c(#"Ignore Non-Detections - remove from data set"=1,
"Set Non-Detections equal to zero"=2,
"Set Non-Detections equal to the Limit of Detection"=3,
"Set Non-Detections equal to the 1/2 times the Limit of Detection"=4)
,selected=4))))),
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
wellPanel(fluidRow(h3("Available Data Sets", style = "text-align: center")),
fluidRow(h4("All Data: "), h5("This table  displays all of the raw data records imported from the Water Quality Portal")),
fluidRow(h4("Non Detects: "), h5("These are the records with values for the 'Result Detection Condition Text' field equal to 'Not Detected' or 'Present below Quantitation Limit'")),
fluidRow(h4("W/O Units: "), h5("These data records have no data entered in either the 'Result Measure - Measure Unit Code' or the
'Quantitation Limit Measure - Measure Unit Code' fields.")),
fluidRow(h4("W/O Methods: "), h5("There are 14 Activity Type Codes which do not require a sample to have a specified method.  These data records
do not match those 14 Activity Type Codes AND have no data entered in the 'Result Analytical Method - Method Identifier' field.")),
fluidRow(h4("Duplicates: "), h5("These data records are duplicated within the imported data set. This means these records match all fields of
another record in the data set except for the 'Activity Type' and 'Activity ID' fields")),
fluidRow(h4("Filtered Data: "), h5("The Filtered Dataset includes only results with units and methods. Duplicate records have been removed.
This is the data set passed to the map and table on the 'View Data' page.")),
fluidRow(h4("Summary: "), h5("This table shows summary statistics of all unique combinations of station, media, characteristic, unit, and sample
fraction.")))),
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## Tt Mod, Save/Load Data Button ####
tabPanel("Save/Load App Data",
wellPanel(fluidRow(h4("Save or Load Data Discovery Tool Data", style = "text-align: center"))
#, fluidRow(column(5),column(2, downloadButton("SaveData","Save Data")))
, fluidRow(br())
, fluidRow("As an alternative to retrieving data each time the app is used the buttons below can be used to save data for a future or load previously saved data.")
#, fluidRow("After loading a dataset if you want to download a new dataset you must exit and re-enter the application. .")
, fluidRow(br())
, fluidRow(
column(7,
fileInput("LoadDataFile","Load Data File",accept=".tsv")  #future could add .rds for smaller files
)
)
# fluidRow(br())
# ,fluidRow(column(1,
#                  bsButton("UpdateData", label="Update Data From File **NOT ACTIVE**", style="primary")
#                  ,bsPopover("UpdateData", "Update Data", trigger = "hover", placement="right", options = list(container = "body")
#                             ,"This button updates the data from a user selected data file. Must upload file first before clicking this button."))
# )
)
),
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
tabPanel("All Data",
fluidRow(
h3("All Imported Data Records", style = "text-align: center")),
fluidRow(h4("This table  displays all of the raw data records imported from the Water Quality Portal", style = "text-align: center")),
fluidRow(column(5), column(2, downloadButton("Save_data1", "Save Data"))),
bsPopover("Save_data1", "Save Data", "Click to download a .tsv file containing the data being viewed.",
"top", trigger = "hover", options = list(container = "body")),
br(),
fluidRow(DT::dataTableOutput("All_Data"))),
tabPanel("Non Detects",
fluidRow(
h3("Data Records with Non Detections", style = "text-align: center")),
fluidRow(h4("These are the records with values for the 'Result Detection Condition Text' field equal to
'Not Detected' or 'Present below Quantitation Limit'", style = "text-align: center")),
fluidRow(column(5), column(2, downloadButton("Save_data2", "Save Data"))),
bsPopover("Save_data2", "Save Data", "Click to download a .tsv file containing the data being viewed.",
"top", trigger = "hover", options = list(container = "body")),
br(),
fluidRow(DT::dataTableOutput("ND_Table"))),
tabPanel("W/O Units",
fluidRow(
h3("Data Records without Units", style = "text-align: center")),
fluidRow(h4("These data records have no data entered in either the 'Result Measure - Measure Unit Code' or the
'Quantitation Limit Measure - Measure Unit Code' fields.", style = "text-align: center")),
fluidRow(column(5), column(2, downloadButton("Save_data3", "Save Data"))),
bsPopover("Save_data3", "Save Data", "Click to download a .tsv file containing the data being viewed.",
"top", trigger = "hover", options = list(container = "body")),
br(),
fluidRow(DT::dataTableOutput("NO_UNITS"))),
tabPanel("W/O Methods",
fluidRow(
h3("Data Records Without Methods", style = "text-align: center")),
fluidRow(h4("There are 14 Activity Type Codes which do not require a sample to have a specified method.  These data records
do not match those 14 Activity Type Codes AND have no data entered in the 'Result Analytical Method - Method Identifier' field.", style = "text-align: center")),
fluidRow(column(5), column(2, downloadButton("Save_data4", "Save Data"))),
bsPopover("Save_data4", "Save Data", "Click to download a .tsv file containing the data being viewed.",
"top", trigger = "hover", options = list(container = "body")),
br(),
fluidRow(DT::dataTableOutput("NO_METH"))),
tabPanel("Duplicates",
fluidRow(
h3("Duplicate Data Records", style = "text-align: center")),
fluidRow(h4("These data records are duplicated within the imported data set. This means these records match all fields of
another record in the data set except for the 'Activity Type' and 'Activity ID' fields", style = "text-align: center")),
fluidRow(column(5), column(2, downloadButton("Save_data5", "Save Data"))),
bsPopover("Save_data5", "Save Data", "Click to download a .tsv file containing the data being viewed.",
"top", trigger = "hover", options = list(container = "body")),
br(),
fluidRow(DT::dataTableOutput("DUPS"))),
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Tt Mod, QAQC tabs ####
tabPanel("QAQC Decisions",
fluidRow((h3("Quality Assurance / Quality Control Decisions", style = "text-align: center")))
, fluidRow(h4("Modify characteristic data for consistent name, units, and sample fraction.", style = "text-align: center"))
, fluidRow(wellPanel(fluidRow(column(1), column(10, h3("QA/QC Decision File", style = "text-align: center")))
, fluidRow(column(1), column(10, "Save/load Excel file with QAQC information.", style = "text-align: center"))
, fluidRow(column(1), column(10, "Changes made here will be reflected in the 'Filtered' data set.", style = "text-align: center"))
, fluidRow(column(1), column(10, "In the table below will be a table of records of parameter names, units, and sample fractions.
The user will have the ability to accept (Apply=TRUE) or refute (Apply=FALSE) each transformation.
The user can edit the file below and save or edit in Excel and reload."
, style = "text-align: center"
)
)
#, fluidRow(column(3, downloadButton("SaveQAQC_Default", "Save Default QAQC File"))
#            # , bsPopover("SaveQAQC_Default", "Save Default QAQC", "Click to save an .XLSX file containing the default QAQC decisions."
#            #             , placement="top", trigger = "hover", options = list(container = "body"))
#           )
# , fluidRow(br())
, fluidRow(column(3, downloadButton("SaveQAQC","Save QAQC File"))
, bsPopover("SaveQAQC", "Save QAQC", "Click to save an .XLSX file containing the QAQC decisions.",
"top", trigger = "hover", options = list(container = "body"))
)
#, br()
, fluidRow(column(7, fileInput("LoadQAQCFile","Load QAQC File",accept=".xlsx"))
)
, fluidRow(column(1,bsButton("UpdateQAQC", label="Update QAQC From File", style="primary")
,bsPopover("UpdateQAQC", "Update QA/QC", trigger = "hover", placement="right", options = list(container = "body")
,"This button updates the QA/QC selections from a user selected QA/QC Excel file. Must upload file first before clicking this button."))
)
, br()
, fluidRow(column(3, bsButton("ApplyQAQC", label="Apply QAQC Decisions to Data", style="primary")))
# , fluidRow(column(1,bsButton("UpdateQAQC_Default", label="Update QAQC Defaults", style="primary")
#                  ,bsPopover("UpdateQAQC_Default", "Default QA/QC", trigger = "hover", placement="right", options = list(container = "body")
#                             ,"This button updates the QA/QC selections from a user selected QA/QC Excel file. Must upload file first before clicking this button."))
# )
)
)
, fluidRow(column(12,DT::dataTableOutput('dt_QAQC')))
),
tabPanel("QAQC Advanced",
fluidRow((h3("Quality Assurance / Quality Control Advanced", style="text-align: center")))
#, fluidRow("button for generating summary by decision.  2nd button for output.")
#, fluidRow("button for generating and adding all parameter combinations to decision table.  Could then export on the basic tab.")
, fluidRow("Shown in table below are all combinations in the data.  Includes 'match' field for QAQC Decisions.")
, fluidRow(column(4, bsButton("QAQC_CombosAdd","Update QAQC Decision combinations", style="primary")
, bsPopover("QAQC_CombosAdd", "Update QA/QC Combinations", trigger = "hover", placement="right", options = list(container = "body")
,"This button updates the QA/QC decisions with any missing cominations from all data."))
)
, fluidRow(column(12,DT::dataTableOutput('dt_QAQC_combos_data')))
),
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
tabPanel("Filtered Data",
fluidRow(
h3("Filtered Data Set", style = "text-align: center")),
fluidRow( h4(" The Filtered Dataset includes only results with units and methods. Duplicate records have been removed.
This is the data set passed to the map and table on the 'View Data' page.",
style = "text-align: center")),
fluidRow(column(5), column(2, downloadButton("Save_data6", "Save Data"))),
bsPopover("Save_data6", "Save Data", "Click to download a .tsv file containing the data being viewed.",
"top", trigger = "hover", options = list(container = "body")),
br(),
fluidRow(DT::dataTableOutput("Filtered"))),
tabPanel("Summary",
fluidRow(
h3("Click the button below to run a summary of the data", style = "text-align: center")),
fluidRow(column(5), column(2,
actionButton("SUMMARY", "Summarize Data"))),
br(),
conditionalPanel("output.Summ_run == 'yes'",
fluidRow(h4(" This table shows summary statistics of all unique combinations of station, media, characteristic, unit, and sample
fraction.", style = "text-align: center")),
fluidRow(column(5), column(2, downloadButton("Save_Summary_Data", "Save Data"))),
bsPopover("Save_Summary_Data", "Save Data", "Click to download a .tsv file containing the data being viewed.",
"top", trigger = "hover", options = list(container = "body")),
br()),
fluidRow(DT::dataTableOutput("SUMMARIZED"))))
)}
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
output$All_Data = DT::renderDataTable(
all_data()[, display, drop=FALSE],  escape = -1, rownames = FALSE,
extensions = 'Buttons', options = list(dom = 'lfrBtip', buttons = I('colvis'),
pageLength = 100,
lengthMenu = c(100, 200, 500),
columnDefs = list(list(visible =  F, targets = list(5,6,7,8)))
), server = TRUE)
str(data())
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
Sys.time()
format(Sys.time(),"%Y%m%d%H%M%S")
as.numeric(format(Sys.time(),"%Y%m%d%H%M%S"))
runApp()
runApp()
q <- input$LoadAppData
q
is.null(q)
!is.null(q)
runApp()
runApp()
q <- input$LoadAppData
q
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
dlfjdj
shiny::runApp()
q <- input$LoadAppData
q
runApp()
runApp()
runApp()
runApp()
q <- input$LoadAppData
q
is.null(q)
runApp()
runApp()
q <- input$LoadAppData
q
runApp()
q <- input$LoadAppData
q
runApp()
runApp()
q <- input$LoadAppData
q
runApp()
runApp()
