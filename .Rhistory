#            #             , placement="top", trigger = "hover", options = list(container = "body"))
#           )
# , fluidRow(br())
, fluidRow(column(3, downloadButton("SaveQAQC","Save QAQC File"))
, bsPopover("SaveQAQC", "Save QAQC", "Click to save an .XLSX file containing the QAQC decisions.",
"top", trigger = "hover", options = list(container = "body"))
)
#, br()
, fluidRow(column(7, fileInput("LoadQAQCFile","Load QAQC File",accept=".xlsx"))
)
, fluidRow(column(1,bsButton("UpdateQAQC", label="Update QAQC From File", style="primary")
,bsPopover("UpdateQAQC", "Update QA/QC", trigger = "hover", placement="right", options = list(container = "body")
,"This button updates the QA/QC selections from a user selected QA/QC Excel file. Must upload file first before clicking this button."))
)
, br()
, fluidRow(column(3, bsButton("ApplyQAQC", label="Apply QAQC Decisions to Data", style="primary")))
# , fluidRow(column(1,bsButton("UpdateQAQC_Default", label="Update QAQC Defaults", style="primary")
#                  ,bsPopover("UpdateQAQC_Default", "Default QA/QC", trigger = "hover", placement="right", options = list(container = "body")
#                             ,"This button updates the QA/QC selections from a user selected QA/QC Excel file. Must upload file first before clicking this button."))
# )
)
)
, fluidRow(column(12,DT::dataTableOutput('dt_QAQC')))
),
tabPanel("QAQC Advanced",
fluidRow((h3("Quality Assurance / Quality Control Advanced", style="text-align: center")))
#, fluidRow("button for generating summary by decision.  2nd button for output.")
#, fluidRow("button for generating and adding all parameter combinations to decision table.  Could then export on the basic tab.")
, fluidRow("Shown in table below are all combinations in the data.  Includes 'match' field for QAQC Decisions.")
, fluidRow(column(4, bsButton("QAQC_CombosAdd","Update QAQC Decision combinations", style="primary")
, bsPopover("QAQC_CombosAdd", "Update QA/QC Combinations", trigger = "hover", placement="right", options = list(container = "body")
,"This button updates the QA/QC decisions with any missing cominations from all data."))
)
, fluidRow(column(12,DT::dataTableOutput('dt_QAQC_combos_data')))
),
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
tabPanel("Filtered Data",
fluidRow(
h3("Filtered Data Set", style = "text-align: center")),
fluidRow( h4(" The Filtered Dataset includes only results with units and methods. Duplicate records have been removed.
This is the data set passed to the map and table on the 'View Data' page.",
style = "text-align: center")),
fluidRow(column(5), column(2, downloadButton("Save_data6", "Save Data"))),
bsPopover("Save_data6", "Save Data", "Click to download a .tsv file containing the data being viewed.",
"top", trigger = "hover", options = list(container = "body")),
br(),
fluidRow(DT::dataTableOutput("Filtered"))),
tabPanel("Summary",
fluidRow(
h3("Click the button below to run a summary of the data", style = "text-align: center")),
fluidRow(column(5), column(2,
actionButton("SUMMARY", "Summarize Data"))),
br(),
conditionalPanel("output.Summ_run == 'yes'",
fluidRow(h4(" This table shows summary statistics of all unique combinations of station, media, characteristic, unit, and sample
fraction.", style = "text-align: center")),
fluidRow(column(5), column(2, downloadButton("Save_Summary_Data", "Save Data"))),
bsPopover("Save_Summary_Data", "Save Data", "Click to download a .tsv file containing the data being viewed.",
"top", trigger = "hover", options = list(container = "body")),
br()),
fluidRow(DT::dataTableOutput("SUMMARIZED"))))
)}
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
output$All_Data = DT::renderDataTable(
all_data()[, display, drop=FALSE],  escape = -1, rownames = FALSE,
extensions = 'Buttons', options = list(dom = 'lfrBtip', buttons = I('colvis'),
pageLength = 100,
lengthMenu = c(100, 200, 500),
columnDefs = list(list(visible =  F, targets = list(5,6,7,8)))
), server = TRUE)
str(data())
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
Sys.time()
format(Sys.time(),"%Y%m%d%H%M%S")
as.numeric(format(Sys.time(),"%Y%m%d%H%M%S"))
runApp()
runApp()
q <- input$LoadAppData
q
is.null(q)
!is.null(q)
runApp()
runApp()
q <- input$LoadAppData
q
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
dlfjdj
shiny::runApp()
q <- input$LoadAppData
q
runApp()
runApp()
runApp()
runApp()
q <- input$LoadAppData
q
is.null(q)
runApp()
runApp()
q <- input$LoadAppData
q
runApp()
q <- input$LoadAppData
q
runApp()
runApp()
q <- input$LoadAppData
q
runApp()
runApp()
shiny::runApp()
runApp()
source('C:/Users/Erik.Leppo/OneDrive - Tetra Tech, Inc/MyDocs_OneDrive/GitHub/DataDiscoveryTool/external/dataQAQC.R', echo=TRUE)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
Sys.time()
format(Sys.time(),"%Y%m%d_%H%M%S")
paste0("DDT_Query_",format(Sys.time(),"%Y%m%d_%H%M%S"),".rds")
strFile <- paste0("DDT_Query_",format(Sys.time(),"%Y%m%d_%H%M%S"),".rds")
strFile
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
input$submit_filters
input$submit_filters==0
val$display2
val$display2=="no"
input$submit_filters==0
input$submit_filters
val$display2=="no"
val$display2
input$submit_filters==0
Name
dim(test())
names(test())
"Name" %in% names(test())
str(test()$Name)
data_sum<-test()[,.(.N, Name = first(Name), LatitudeMeasure = first(LatitudeMeasure), LongitudeMeasure = first(LongitudeMeasure),
Samples = length(unique(ActivityIdentifier))), by = "Station"]
dim(data_sum)
data <- as.data.frame(data_sum
)
dim(data)
runApp()
runApp()
runApp()
lst_filters_load$org
lst_filters_load$org)==FALSE
lst_filters_load$org==FALSE
is.null(lst_filters_load$org)==FALSE
lst_filters_load$org
is.null(lst_filters_load$org)
!is.null(lst_filters_load$org)
runApp()
!is.null(lst_filters_load$org)
lst_filters_load$org
runApp()
runApp()
runApp()
!is.null(lst_filters_load$org)
updateCollapse(session, id="view_sp", open="Filter by Organization")
runApp()
updateCollapse(session, id="view_sp", open="Filter by Organization")
data <- data.table(filtered_data())
names(daata)
names(data)
"OrganizationFormalName" %in% names(data)
unique(data$OrganizationFormalName)
unique(data[, "OrganizationFormalName"])
org_Choices <- unique(data[, "OrganizationFormalName"])
org_Choices
org_Choices[1]
unique(data[, as.character(OrganizationFormalName)])
org_Choices <- unique(data[, as.character(OrganizationFormalName)])
org_Choices
org_Choices[1]
updateRadioButtons(session, "org_sel", choices=myChoicesRadio, selected=2)
updateSelectizeInput(session, "org"
, choices=org_Choices
, selected=lst_filters_load$org)
updateButton(session, "submit_filters", value = 0)
updateButton(session, "submit_filters", value = 1)
library(DT)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
source('C:/Users/Erik.Leppo/OneDrive - Tetra Tech, Inc/MyDocs_OneDrive/GitHub/DataDiscoveryTool/external/dataQAQC.R', echo=TRUE)
runApp()
q
session
mySession <- session
# Error check
if(is.null(q)) return(NULL)
# define list
lst_filters_load <- readRDS(q$datapath)
# Radio Button Choices
myChoicesRadio <- c("Select All"=1, "Deselect All"=2)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
tabPanel("Query Data",
fluidPage(
h1("Select filters to build your data query", style  = "text-align:center"),
fluidRow(br()),
fluidRow(wellPanel(bsCollapse(multiple = TRUE, open = "col1", id = "collapse1",
bsCollapsePanel(h3("Location", style  = "text-align:center"),
wellPanel( style = "overflow: auto;",
column( 4,
h3("Place"),
selectizeInput("state", label=p("Choose a State"),
choices = as.character(states$desc) , multiple = TRUE),
bsPopover("state", "State Help", "States can be selected from the drop down list. Multiple states may be selected.",
"right", trigger = "hover", options = list(container = "body")),
uiOutput('county'),
#                                                                               selectizeInput("county", label=p("Choose a County"), selected = NULL,
#                                                                                              choices = as.character(counties$desc) , multiple = TRUE),
bsPopover("county", "County Help", "Counties for the selected states can be selected from the drop down list. Multiple counties may be selected.",
"right", trigger = "hover", options= list(container = "body")),
#selectizeInput("huc_ID", label=p("HUC"), selected = NULL, choices = NULL, multiple = TRUE ),
textInput("huc_ID", label=p("HUC"), value = "", placeholder = "Enter a huc code (ex. 03020201)"),
bsPopover("huc_ID", "HUC Help",
"A HUC is a federal code used to identify the hydrologic unit of the monitoring location to the cataloging unit level of precision. Full hydrologic unit codes (HUCs) or partial HUCs using trailing wildcards may be entered. Only trailing wildcards are accepted. More than one HUC may be entered, separated by semicolons. The lists and maps of hydrologic units are available from the USGS.",
"top", trigger = "hover", options = list(container = "body"))),
column( 4,
tags$h3(id = "Point", "Point Location", style  = "text-align:center"),
bsPopover(id = "Point", "Point Location Help", "Enter a latitude and longitude and a radial distance to create a search area. Distance should be entered in miles. Latitude and longitude should be entered in decimal degrees relative to the NAD83 datum. Longitudes in the western hemisphere should be preceded with a negative sign (-). Many stations outside the continental US do not have latitude and longitude referenced to WGS84 and therefore cannot be found using these parameters.",
"bottom", trigger = "hover",options= list(container = "body")),
column(6, numericInput("LAT", "Latitude (decimal degrees)", value = 0, min = 0, max = 100)),
column(6, numericInput("LONG", "Longitude (decimal degrees)", value = 0, min = 0, max = 100)),
column(12, numericInput("distance", "Distance from point (miles)", value = 0, min = 0, max = 100))),
column(4,
tags$h3(id = "BBOX", "Bounding Box", style  = "text-align:center"),
bsPopover(id = "BBOX", "Bounding Box Help",
"Enter the North and South latitudes and the East and West longitudes to create a bounding box. Latitude and Longitude should be entered in decimal degrees relative to the NAD83 datum. Longitudes in the western hemisphere should be preceded with a negative sign (-).",
"bottom", trigger = "hover", options = list(container = "body")),
column(6, numericInput("North", "North", value = 0, min = -100, max = 100) ),
column(6, numericInput("South", "South", value = 0, min = -100, max = 100) ),
column(6, numericInput("East", "East", value = 0, min = -100, max = 100) ),
column(6, numericInput("West", "West", value = 0, min = -100, max = 100) )))),
bsCollapsePanel(h3("Sampling Parameters", style  = "text-align:center"),
wellPanel(style = "overflow: auto;",
column(3, h4("Date Range"), h5("(MM-DD-YYYY)"),
dateInput("date_Lo", "From", format = "mm-dd-yyyy", value = ""),
dateInput("date_Hi", "To", format = "mm-dd-yyyy", value = "")
),
column(3,selectizeInput('media',  label = a("Sample Media", target="_blank", href = "https://www.waterqualitydata.us/portal_userguide/#WQPUserGuide-Table2"), multiple = TRUE, choices = '', options = list(
valueField = 'value',
labelField = 'value',
searchField = 'value',
options = list(),
create = FALSE,
load = I("function(query, callback) {
$.ajax({
url: 'https://www.waterqualitydata.us/Codes/samplemedia?mimeType=json',
type: 'GET',
error: function() {
callback(res.codes);
},
success: function(res) {
callback(res.codes);
}
});
}")
)),
bsPopover("media", "Sample Media Help",
"A sample media indicates the environmental medium where a sample was taken.  Click the sample media heading for a list and description of each media.  Sample media can be selected from the drop down list.  Select multiple items by clicking on each desired option.  The selected options will appear in the sample media box.  To remove a selected item, click on it to select it, then click the backspace key.",
"top", trigger = "hover", options = list(container = "body"))),
column(3, selectizeInput('group', 'Characteristic Group', multiple = TRUE, choices = '', selected = NULL, options = list(
valueField = 'value',
labelField = 'value',
searchField = 'value',
options = list(),
create = FALSE,
load = I("function(query, callback) {
$.ajax({
url: 'https://www.waterqualitydata.us/Codes/characteristictype?mimeType=json',
type: 'GET',
error: function() {
callback();
},
success: function(res) {
callback(res.codes);
}
});
}")
)),
bsPopover("group", "Characteristic Group Help",
"To select a characteristic group start typing the group name in the box.  This will generate a drop-down list.  Characteristic groups can be selected from the drop-down list.   Select multiple items by clicking on each desired option.  The selected options will appear in the Characteristic Group box.  To remove a selected item, click on it to select it, then click the backspace key.",
"top", trigger = "hover", options = list(container = "body"))),
column(3, selectizeInput('chars', 'Characteristic', multiple = TRUE, choices = '',  options = list(
valueField = 'value',
labelField = 'value',
searchField = 'value',
options = list(),
create = FALSE,
load = I("function(query, callback) {
if (!query.length) return callback();
$.ajax({
url: 'https://www.waterqualitydata.us/Codes/characteristicname?mimeType=json',
type: 'GET',
error: function() {
callback();
},
success: function(res) {
callback(res.codes);
}
});
}")
)),
bsPopover("chars", "Characteristic Help",
"A characteristic identifies different types of environmental measurements.  These names are derived from the USEPA Substance Registry System (SRS).  To select a characteristic start typing the characteristic name in the box.  This will generate a drop-down list.  Characteristics can be selected from the drop-down list.   Select multiple items by clicking on each desired option.  The selected options will appear in the Characteristic Group box.  To remove a selected item, click on it to select it, then click the backspace key.",
"top", trigger = "hover", options = list(container = "body"))))),
bsCollapsePanel(h3("Site Parameters", style  = "text-align:center"),
wellPanel( style = "overflow: auto;",
div(style = "height:250px;",
column(4, selectizeInput('site_type', label = HTML("<a target = '_new' href = 'https://www.waterqualitydata.us/portal_userguide/#WQPUserGuide-Table1'>Site Type</a>"),
multiple = TRUE, choices = '', options = list(
valueField = 'value',
labelField = 'value',
searchField = 'value',
options = list(),
create = FALSE,
load = I("function(query, callback) {
if (!query.length) return callback();
$.ajax({
url: 'https://www.waterqualitydata.us/Codes/sitetype?mimeType=json',
type: 'GET',
error: function() {
callback();
},
success: function(res) {
callback(res.codes);
}
});
}")
)),
bsPopover("site_type", "Site Type Help",
"A site type is a generalized location in the hydrologic cycle, or a man-made feature thought to affect the hydrologic conditions measured at a site.  To select a site type start typing the name in the box.  This will generate a drop-down list.  Site Types can be selected from the drop-down list.   Select multiple items by clicking on each desired option.  The selected options will appear in the Site Type box.  To remove a selected item, click on it to select it, then click the backspace key.",
"top", trigger = "hover", options = list(container = "body"))),
column(4, selectizeInput('org_id', 'Organization', multiple = TRUE, choices = '', options = list(
valueField = 'value',
labelField = 'desc',
searchField = 'desc',
options = list(),
create = FALSE,
load = I("function(query, callback) {
if (!query.length) return callback();
$.ajax({
url: 'https://www.waterqualitydata.us/Codes/organization?mimeType=json',
type: 'GET',
error: function() {
callback();
},
success: function(res) {
callback(res.codes);
}
});
}")
)),
bsPopover("org_id", "Organization Help",
"A designator used to identify a unique business establishment within a context.  Select from a list of organization IDs represented in the source databases.  Multiple IDs may be selected.",
"top", trigger = "hover", options = list( container = "body"))),
column(4, textInput("site_id", label=p("Site ID")),
bsPopover("site_id", "Site ID Help",
"A site id is a designator used to describe the unique name, number, or code assigned to identify the monitoring location. Site IDs are case-sensitive and should be entered in the following format: AGENCY-STATION NUMBER. More than one site ID may be entered, separated by semicolons. If you are entering an NWIS site, use USGS as the AGENCY.",
"top", trigger = "hover", options = list(container = "body"))))
))))),
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## Tt Mod, Save/Load/Clear Buttons ####
br()
,fluidRow(column(5),
column(2,bsButton("ClearQuery", label="Clear Query Selections", style="primary")
,bsPopover("SaveQuery", "Save Query", trigger = "hover", placement="right", options = list(container = "body")
,"This button saves the query selections for later use."))
)
# # Tt Button to Save URL parts, use lst.url
# ,fluidRow(br()),
#       fluidRow(wellPanel(fluidRow(h4("URL Parts", style  = "text-align:center")),
#           verbatimTextOutput("lst.URL")))
#,br()
# ,fluidRow(column(1,bsButton("ClearQuery", label="Clear Query Selections", style="primary")
#                  ,bsPopover("ClearQuery", "Clear Query", trigger = "hover", placement="right", options = list(container = "body")
#                             ,"This button clears the user's query selections.")
#                  )
#           )
,br()
,fluidRow(column(5),column(2,downloadButton("SaveQuery2","Save Query File")
)
# ,column(1,
#        bsButton("SaveQuery", label="Save Query", style="primary")
#        ,bsPopover("SaveQuery", "Save Query", trigger = "hover", placement="right", options = list(container = "body")
#                   ,"This button saves the query selections for later use."))
,bsPopover("SaveQuery2", "Save Query File", "Click to save the query selections for use later.",
"top", trigger = "hover", options = list(container = "body")
)
)
#,fluidRow(br())
#,fluidRow(br())
,fluidRow(column(5),column(7,fileInput("LoadQueryFile","Load Query File",accept=".rds")
)
)
#,fluidRow(br())
,fluidRow(column(4), column(1,bsButton("UpdateQuery", label="Update Query From File", style="primary")
,bsPopover("UpdateQuery", "Update Query", trigger = "hover", placement="right", options = list(container = "body")
,"This button updates the query selections from a user selected query file. Must upload file first before clicking this button."))
,column(1)
, column(4, "<== Must click twice.")
)
, br(),
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
fluidRow(
column(5),
column(2,
bsButton("CHECK", "Retrieve Data", style = "primary"),
bsModal("moMod", "WQP Query Processing", trigger = "CHECK",
br(),
fluidRow(
h3(textOutput("REC_txt"),
style  = "text-align:center"),
conditionalPanel("output.Rec_count == 'yes' ",
uiOutput('modal1'),
uiOutput('modal2')
),
bsPopover("modal2", "Please only click once", "Importing data takes time. Please wait for the import complete message to display. Clicking the button more than once will cause the data to download multiple times and will therefore take much longer.",
"top", trigger = "hover", options = list(container = "body")),
conditionalPanel(
condition = "output.data_check == 'yes' & output.Display2 == 'yes' ",
fluidRow(h2("Data Import Complete", style  = "text-align:center; color:green")),
fluidRow(h3("Click close and proceed to the Check Data Tab. ", style  = "text-align:center; color:#204060")
))))
)
)
),fluidRow(br()),
fluidRow(wellPanel(fluidRow(h4("WQP Web Service Query URL", style  = "text-align:center")),
verbatimTextOutput("URL")))
)}
runApp()
runApp()
dim(map_df)
runApp()
dim(map_df)
str(map_df)
dim(map_df())
dim(map_df())
submit_filters
input$submit_filters
input$submit_filters==0
val$display2=="no"
data_sum<-test()[,.(.N, Name = first(Name), LatitudeMeasure = first(LatitudeMeasure), LongitudeMeasure = first(LongitudeMeasure),
Samples = length(unique(ActivityIdentifier))), by = "Station"]
data <- as.data.frame(data_sum)
head(data)
leaflet(map_df()) %>% fitBounds(lng1 = ~min(LongitudeMeasure),
lat1 = ~min(LatitudeMeasure), lng2 = ~max(LongitudeMeasure),
lat2 = ~max(LatitudeMeasure)) %>% addTiles("//{s}.tiles.mapbox.com/v3/jcheng.map-5ebohr46/{z}/{x}/{y}.png") %>%
addCircleMarkers(lng = ~LongitudeMeasure, lat = ~LatitudeMeasure,
radius = (log(map_df()$N) + 2) * radiusFactor/5^2,
layerId = row.names(map_df()))
runApp()
